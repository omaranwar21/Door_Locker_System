
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000350a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  0000350a  0000359e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f0  008000f0  0000362e  2**0
                  ALLOC
  3 .stab         0000303c  00000000  00000000  00003630  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001512  00000000  00000000  0000666c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a962  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b710  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <main>
      8a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_creatPass>:
		TIMER1_COMPARE_MODE
};

uint8 g_Tick = 0;

void HMI_creatPass(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 firstPass[PASS_SIZE+1];
	uint8 secondPass[PASS_SIZE+1];
	uint8 correct;

	UART_init(&HMI_UART);
     b5a:	82 ee       	ldi	r24, 0xE2	; 226
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 bc 18 	call	0x3178	; 0x3178 <UART_init>

	HMI_enterPassDisplay();
     b62:	0e 94 1b 07 	call	0xe36	; 0xe36 <HMI_enterPassDisplay>

	HMI_getPass(firstPass);
     b66:	ce 01       	movw	r24, r28
     b68:	02 96       	adiw	r24, 0x02	; 2
     b6a:	0e 94 2c 07 	call	0xe58	; 0xe58 <HMI_getPass>

	LCD_clearScreen();
     b6e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
	LCD_displayString("Plz re-enter the ");
     b72:	80 e6       	ldi	r24, 0x60	; 96
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
	LCD_moveCursor(1, 0);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_moveCursor>
	LCD_displayString("same pass: ");
     b82:	82 e7       	ldi	r24, 0x72	; 114
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>

	HMI_getPass(secondPass);
     b8a:	ce 01       	movw	r24, r28
     b8c:	08 96       	adiw	r24, 0x08	; 8
     b8e:	0e 94 2c 07 	call	0xe58	; 0xe58 <HMI_getPass>

	HMI_Ready();
     b92:	0e 94 4b 08 	call	0x1096	; 0x1096 <HMI_Ready>

	UART_sendByte(HMI_FIRST_PASS);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>
	while(UART_recieveByte() != MICRO_READY);
     b9c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     ba0:	80 31       	cpi	r24, 0x10	; 16
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <HMI_creatPass+0x56>
	UART_sendString(firstPass);
     ba4:	ce 01       	movw	r24, r28
     ba6:	02 96       	adiw	r24, 0x02	; 2
     ba8:	0e 94 79 19 	call	0x32f2	; 0x32f2 <UART_sendString>

	while(UART_recieveByte() != MICRO_READY);
     bac:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     bb0:	80 31       	cpi	r24, 0x10	; 16
     bb2:	e1 f7       	brne	.-8      	; 0xbac <HMI_creatPass+0x66>

	HMI_Ready();
     bb4:	0e 94 4b 08 	call	0x1096	; 0x1096 <HMI_Ready>
	UART_sendByte(HMI_SECOND_PASS);
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>
	while(UART_recieveByte() != MICRO_READY);
     bbe:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     bc2:	80 31       	cpi	r24, 0x10	; 16
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <HMI_creatPass+0x78>
	UART_sendString(secondPass);
     bc6:	ce 01       	movw	r24, r28
     bc8:	08 96       	adiw	r24, 0x08	; 8
     bca:	0e 94 79 19 	call	0x32f2	; 0x32f2 <UART_sendString>


	while(UART_recieveByte() != MICRO_READY);
     bce:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     bd2:	80 31       	cpi	r24, 0x10	; 16
     bd4:	e1 f7       	brne	.-8      	; 0xbce <HMI_creatPass+0x88>
	correct = UART_recieveByte();
     bd6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     bda:	89 83       	std	Y+1, r24	; 0x01

	if (!correct) {
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 23       	and	r24, r24
     be0:	29 f4       	brne	.+10     	; 0xbec <HMI_creatPass+0xa6>
		LCD_clearScreen();
     be2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
		HMI_creatPass();
     be6:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_creatPass>
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <HMI_creatPass+0xae>
	}
	else {
		LCD_clearScreen();
     bec:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
		HMI_options();
     bf0:	0e 94 03 06 	call	0xc06	; 0xc06 <HMI_options>
	}
}
     bf4:	2d 96       	adiw	r28, 0x0d	; 13
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <HMI_options>:

void HMI_options(void){
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	61 97       	sbiw	r28, 0x11	; 17
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0;
     c1a:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
     c1c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
     c20:	8e e7       	ldi	r24, 0x7E	; 126
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
	LCD_moveCursor(1, 0);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     c30:	8c e8       	ldi	r24, 0x8C	; 140
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
	key = KEYPAD_getPressedKey();
     c38:	0e 94 0a 0c 	call	0x1814	; 0x1814 <KEYPAD_getPressedKey>
     c3c:	8f 87       	std	Y+15, r24	; 0x0f
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	aa ef       	ldi	r26, 0xFA	; 250
     c44:	b3 e4       	ldi	r27, 0x43	; 67
     c46:	8b 87       	std	Y+11, r24	; 0x0b
     c48:	9c 87       	std	Y+12, r25	; 0x0c
     c4a:	ad 87       	std	Y+13, r26	; 0x0d
     c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c50:	7c 85       	ldd	r23, Y+12	; 0x0c
     c52:	8d 85       	ldd	r24, Y+13	; 0x0d
     c54:	9e 85       	ldd	r25, Y+14	; 0x0e
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	4a ef       	ldi	r20, 0xFA	; 250
     c5c:	54 e4       	ldi	r21, 0x44	; 68
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8f 83       	std	Y+7, r24	; 0x07
     c68:	98 87       	std	Y+8, r25	; 0x08
     c6a:	a9 87       	std	Y+9, r26	; 0x09
     c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <HMI_options+0x8a>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <HMI_options+0x108>
	else if (__tmp > 65535)
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <HMI_options+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
     caa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cac:	8d 85       	ldd	r24, Y+13	; 0x0d
     cae:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <HMI_options+0xea>
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <HMI_options+0xd8>
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <HMI_options+0xcc>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <HMI_options+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <HMI_options+0x114>
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(KEYPAD_DELAY);

	switch (key) {
     d22:	8f 85       	ldd	r24, Y+15	; 0x0f
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	39 8b       	std	Y+17, r19	; 0x11
     d2a:	28 8b       	std	Y+16, r18	; 0x10
     d2c:	88 89       	ldd	r24, Y+16	; 0x10
     d2e:	99 89       	ldd	r25, Y+17	; 0x11
     d30:	8b 32       	cpi	r24, 0x2B	; 43
     d32:	91 05       	cpc	r25, r1
     d34:	31 f0       	breq	.+12     	; 0xd42 <HMI_options+0x13c>
     d36:	28 89       	ldd	r18, Y+16	; 0x10
     d38:	39 89       	ldd	r19, Y+17	; 0x11
     d3a:	2d 32       	cpi	r18, 0x2D	; 45
     d3c:	31 05       	cpc	r19, r1
     d3e:	21 f0       	breq	.+8      	; 0xd48 <HMI_options+0x142>
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <HMI_options+0x148>
		case '+':
			HMI_openDoor();
     d42:	0e 94 b2 06 	call	0xd64	; 0xd64 <HMI_openDoor>
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <HMI_options+0x14c>
			break;
		case '-':
			HMI_changePass();
     d48:	0e 94 c8 06 	call	0xd90	; 0xd90 <HMI_changePass>
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <HMI_options+0x14c>
			break;
		default:
			HMI_passCheching();
     d4e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <HMI_passCheching>
	}
}
     d52:	61 96       	adiw	r28, 0x11	; 17
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <HMI_openDoor>:


void HMI_openDoor(void){
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	uint8 correct;
	HMI_enterPassDisplay();
     d6e:	0e 94 1b 07 	call	0xe36	; 0xe36 <HMI_enterPassDisplay>
	correct = HMI_passCheching();
     d72:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <HMI_passCheching>
     d76:	89 83       	std	Y+1, r24	; 0x01

	if (correct) {
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	88 23       	and	r24, r24
     d7c:	19 f0       	breq	.+6      	; 0xd84 <HMI_openDoor+0x20>
		HMI_openAction();
     d7e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <HMI_openAction>
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <HMI_openDoor+0x24>
	}
	else {
		HMI_ErrorAction();
     d84:	0e 94 59 08 	call	0x10b2	; 0x10b2 <HMI_ErrorAction>
	}

}
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <HMI_changePass>:


void HMI_changePass(void){
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	0f 92       	push	r0
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	uint8 check;
	check = HMI_passCheching();
     d9a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <HMI_passCheching>
     d9e:	89 83       	std	Y+1, r24	; 0x01

	if (check) {
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 23       	and	r24, r24
     da4:	19 f0       	breq	.+6      	; 0xdac <HMI_changePass+0x1c>
		HMI_creatPass();
     da6:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_creatPass>
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <HMI_changePass+0x20>
	}
	else {
		HMI_ErrorAction();
     dac:	0e 94 59 08 	call	0x10b2	; 0x10b2 <HMI_ErrorAction>
	}

}
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <HMI_passCheching>:

uint8 HMI_passCheching(void){
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	29 97       	sbiw	r28, 0x09	; 9
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[PASS_SIZE+1];
	uint8 checkPass;
	uint8 loop;
	for (loop = 0; loop < HMI_TRIALS; ++loop) {
     dcc:	19 82       	std	Y+1, r1	; 0x01
     dce:	25 c0       	rjmp	.+74     	; 0xe1a <HMI_passCheching+0x62>
		LCD_clearScreen();
     dd0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
		HMI_enterPassDisplay();
     dd4:	0e 94 1b 07 	call	0xe36	; 0xe36 <HMI_enterPassDisplay>
		HMI_getPass(pass);
     dd8:	ce 01       	movw	r24, r28
     dda:	03 96       	adiw	r24, 0x03	; 3
     ddc:	0e 94 2c 07 	call	0xe58	; 0xe58 <HMI_getPass>

		HMI_Ready();
     de0:	0e 94 4b 08 	call	0x1096	; 0x1096 <HMI_Ready>
		UART_sendByte(HMI_CHECK_PASS);
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>
		while(UART_recieveByte() != MICRO_READY);
     dea:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     dee:	80 31       	cpi	r24, 0x10	; 16
     df0:	e1 f7       	brne	.-8      	; 0xdea <HMI_passCheching+0x32>
		UART_sendString(pass);
     df2:	ce 01       	movw	r24, r28
     df4:	03 96       	adiw	r24, 0x03	; 3
     df6:	0e 94 79 19 	call	0x32f2	; 0x32f2 <UART_sendString>

		while(UART_recieveByte() != MICRO_READY);
     dfa:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     dfe:	80 31       	cpi	r24, 0x10	; 16
     e00:	e1 f7       	brne	.-8      	; 0xdfa <HMI_passCheching+0x42>
		checkPass = UART_recieveByte();
     e02:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
     e06:	8a 83       	std	Y+2, r24	; 0x02

		if (checkPass) {
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	88 23       	and	r24, r24
     e0c:	19 f0       	breq	.+6      	; 0xe14 <HMI_passCheching+0x5c>
			return 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 87       	std	Y+9, r24	; 0x09
     e12:	07 c0       	rjmp	.+14     	; 0xe22 <HMI_passCheching+0x6a>

uint8 HMI_passCheching(void){
	uint8 pass[PASS_SIZE+1];
	uint8 checkPass;
	uint8 loop;
	for (loop = 0; loop < HMI_TRIALS; ++loop) {
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	c0 f2       	brcs	.-80     	; 0xdd0 <HMI_passCheching+0x18>
		else {
			continue;
		}

	}
	return 0;
     e20:	19 86       	std	Y+9, r1	; 0x09
     e22:	89 85       	ldd	r24, Y+9	; 0x09
}
     e24:	29 96       	adiw	r28, 0x09	; 9
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <HMI_enterPassDisplay>:

void HMI_enterPassDisplay(void){
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     e3e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass: ");
     e42:	8c e9       	ldi	r24, 0x9C	; 156
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
	LCD_moveCursor(1, 0);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_moveCursor>
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <HMI_getPass>:


void HMI_getPass(uint8*pass){
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	6f 97       	sbiw	r28, 0x1f	; 31
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	9f 8f       	std	Y+31, r25	; 0x1f
     e72:	8e 8f       	std	Y+30, r24	; 0x1e

	uint8 loop;
	for (loop = 0; loop < PASS_SIZE; ++loop) {
     e74:	1d 8e       	std	Y+29, r1	; 0x1d
     e76:	84 c0       	rjmp	.+264    	; 0xf80 <HMI_getPass+0x128>
		pass[loop] = KEYPAD_getPressedKey();
     e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e80:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e82:	8c 01       	movw	r16, r24
     e84:	02 0f       	add	r16, r18
     e86:	13 1f       	adc	r17, r19
     e88:	0e 94 0a 0c 	call	0x1814	; 0x1814 <KEYPAD_getPressedKey>
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 83       	st	Z, r24
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	aa ef       	ldi	r26, 0xFA	; 250
     e96:	b3 e4       	ldi	r27, 0x43	; 67
     e98:	89 8f       	std	Y+25, r24	; 0x19
     e9a:	9a 8f       	std	Y+26, r25	; 0x1a
     e9c:	ab 8f       	std	Y+27, r26	; 0x1b
     e9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	69 8d       	ldd	r22, Y+25	; 0x19
     ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8d 8b       	std	Y+21, r24	; 0x15
     eba:	9e 8b       	std	Y+22, r25	; 0x16
     ebc:	af 8b       	std	Y+23, r26	; 0x17
     ebe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ec0:	6d 89       	ldd	r22, Y+21	; 0x15
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <HMI_getPass+0x8a>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9c 8b       	std	Y+20, r25	; 0x14
     ede:	8b 8b       	std	Y+19, r24	; 0x13
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <HMI_getPass+0x108>
	else if (__tmp > 65535)
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	4c f5       	brge	.+82     	; 0xf4c <HMI_getPass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	69 8d       	ldd	r22, Y+25	; 0x19
     efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9c 8b       	std	Y+20, r25	; 0x14
     f20:	8b 8b       	std	Y+19, r24	; 0x13
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <HMI_getPass+0xea>
     f24:	88 ec       	ldi	r24, 0xC8	; 200
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9a 8b       	std	Y+18, r25	; 0x12
     f2a:	89 8b       	std	Y+17, r24	; 0x11
     f2c:	89 89       	ldd	r24, Y+17	; 0x11
     f2e:	9a 89       	ldd	r25, Y+18	; 0x12
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <HMI_getPass+0xd8>
     f34:	9a 8b       	std	Y+18, r25	; 0x12
     f36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	8b 89       	ldd	r24, Y+19	; 0x13
     f3a:	9c 89       	ldd	r25, Y+20	; 0x14
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	9c 8b       	std	Y+20, r25	; 0x14
     f40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	8b 89       	ldd	r24, Y+19	; 0x13
     f44:	9c 89       	ldd	r25, Y+20	; 0x14
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f7       	brne	.-38     	; 0xf24 <HMI_getPass+0xcc>
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <HMI_getPass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	6d 89       	ldd	r22, Y+21	; 0x15
     f4e:	7e 89       	ldd	r23, Y+22	; 0x16
     f50:	8f 89       	ldd	r24, Y+23	; 0x17
     f52:	98 8d       	ldd	r25, Y+24	; 0x18
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9c 8b       	std	Y+20, r25	; 0x14
     f5e:	8b 8b       	std	Y+19, r24	; 0x13
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	9c 89       	ldd	r25, Y+20	; 0x14
     f64:	98 8b       	std	Y+16, r25	; 0x10
     f66:	8f 87       	std	Y+15, r24	; 0x0f
     f68:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6a:	98 89       	ldd	r25, Y+16	; 0x10
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <HMI_getPass+0x114>
     f70:	98 8b       	std	Y+16, r25	; 0x10
     f72:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(KEYPAD_DELAY);
		LCD_displayCharacter('*');
     f74:	8a e2       	ldi	r24, 0x2A	; 42
     f76:	0e 94 2f 12 	call	0x245e	; 0x245e <LCD_displayCharacter>


void HMI_getPass(uint8*pass){

	uint8 loop;
	for (loop = 0; loop < PASS_SIZE; ++loop) {
     f7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
     f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f82:	85 30       	cpi	r24, 0x05	; 5
     f84:	08 f4       	brcc	.+2      	; 0xf88 <HMI_getPass+0x130>
     f86:	78 cf       	rjmp	.-272    	; 0xe78 <HMI_getPass+0x20>
		pass[loop] = KEYPAD_getPressedKey();
		_delay_ms(KEYPAD_DELAY);
		LCD_displayCharacter('*');
	}

	while(KEYPAD_getPressedKey() != ENTER_BUTTON);
     f88:	0e 94 0a 0c 	call	0x1814	; 0x1814 <KEYPAD_getPressedKey>
     f8c:	8d 33       	cpi	r24, 0x3D	; 61
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <HMI_getPass+0x130>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	aa ef       	ldi	r26, 0xFA	; 250
     f96:	b3 e4       	ldi	r27, 0x43	; 67
     f98:	8b 87       	std	Y+11, r24	; 0x0b
     f9a:	9c 87       	std	Y+12, r25	; 0x0c
     f9c:	ad 87       	std	Y+13, r26	; 0x0d
     f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a ef       	ldi	r20, 0xFA	; 250
     fae:	54 e4       	ldi	r21, 0x44	; 68
     fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	98 87       	std	Y+8, r25	; 0x08
     fbc:	a9 87       	std	Y+9, r26	; 0x09
     fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <HMI_getPass+0x18a>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <HMI_getPass+0x208>
	else if (__tmp > 65535)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <HMI_getPass+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <HMI_getPass+0x1ea>
    1024:	88 ec       	ldi	r24, 0xC8	; 200
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <HMI_getPass+0x1d8>
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <HMI_getPass+0x1cc>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <HMI_getPass+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <HMI_getPass+0x214>
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(KEYPAD_DELAY);
	pass[PASS_SIZE] = '#';
    1074:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1076:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1078:	fc 01       	movw	r30, r24
    107a:	35 96       	adiw	r30, 0x05	; 5
    107c:	83 e2       	ldi	r24, 0x23	; 35
    107e:	80 83       	st	Z, r24

}
    1080:	6f 96       	adiw	r28, 0x1f	; 31
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <HMI_Ready>:


void HMI_Ready(void){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(MICRO_READY);
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>
	while(UART_recieveByte() != MICRO_READY);
    10a4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
    10a8:	80 31       	cpi	r24, 0x10	; 16
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <HMI_Ready+0xe>
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <HMI_ErrorAction>:

void HMI_ErrorAction(void){
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	HMI_Ready();
    10ba:	0e 94 4b 08 	call	0x1096	; 0x1096 <HMI_Ready>
	UART_sendByte(HMI_ERROR_ACTION);
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>

	LCD_clearScreen();
    10c4:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
	Timer1_setCallBack(HMI_Stuck);
    10c8:	80 ec       	ldi	r24, 0xC0	; 192
    10ca:	98 e0       	ldi	r25, 0x08	; 8
    10cc:	0e 94 aa 18 	call	0x3154	; 0x3154 <Timer1_setCallBack>
	Timer1_init(&HMI_Timer1);
    10d0:	89 ee       	ldi	r24, 0xE9	; 233
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 57 18 	call	0x30ae	; 0x30ae <Timer1_init>
	LCD_displayString("ERROR");
    10d8:	8d ea       	ldi	r24, 0xAD	; 173
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>


	while (g_Tick < 60);
    10e0:	80 91 f0 00 	lds	r24, 0x00F0
    10e4:	8c 33       	cpi	r24, 0x3C	; 60
    10e6:	e0 f3       	brcs	.-8      	; 0x10e0 <HMI_ErrorAction+0x2e>

	Timer1_deInit();
    10e8:	0e 94 9c 18 	call	0x3138	; 0x3138 <Timer1_deInit>
	g_Tick = 0;
    10ec:	10 92 f0 00 	sts	0x00F0, r1
	HMI_options();
    10f0:	0e 94 03 06 	call	0xc06	; 0xc06 <HMI_options>
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <HMI_openAction>:

void HMI_openAction(void){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	HMI_Ready();
    1102:	0e 94 4b 08 	call	0x1096	; 0x1096 <HMI_Ready>
	UART_sendByte(HMI_OPEN_ACTION);
    1106:	85 e0       	ldi	r24, 0x05	; 5
    1108:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>

	while(UART_recieveByte() != MICRO_READY);
    110c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
    1110:	80 31       	cpi	r24, 0x10	; 16
    1112:	e1 f7       	brne	.-8      	; 0x110c <HMI_openAction+0x12>

	LCD_clearScreen();
    1114:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>

	LCD_displayString("Door is ");
    1118:	83 eb       	ldi	r24, 0xB3	; 179
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "Unlocking");
    1120:	2c eb       	ldi	r18, 0xBC	; 188
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>

	Timer1_setCallBack(HMI_Stuck);
    112e:	80 ec       	ldi	r24, 0xC0	; 192
    1130:	98 e0       	ldi	r25, 0x08	; 8
    1132:	0e 94 aa 18 	call	0x3154	; 0x3154 <Timer1_setCallBack>
	Timer1_init(&HMI_Timer1);
    1136:	89 ee       	ldi	r24, 0xE9	; 233
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 57 18 	call	0x30ae	; 0x30ae <Timer1_init>


	while(g_Tick < 15);
    113e:	80 91 f0 00 	lds	r24, 0x00F0
    1142:	8f 30       	cpi	r24, 0x0F	; 15
    1144:	e0 f3       	brcs	.-8      	; 0x113e <HMI_openAction+0x44>

	LCD_clearScreen();
    1146:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
	LCD_displayString("...");
    114a:	86 ec       	ldi	r24, 0xC6	; 198
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>

	while(g_Tick < 19);
    1152:	80 91 f0 00 	lds	r24, 0x00F0
    1156:	83 31       	cpi	r24, 0x13	; 19
    1158:	e0 f3       	brcs	.-8      	; 0x1152 <HMI_openAction+0x58>

	LCD_clearScreen();
    115a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>
	LCD_displayString("Door is Locking");
    115e:	8a ec       	ldi	r24, 0xCA	; 202
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>

	while(g_Tick < 34);
    1166:	80 91 f0 00 	lds	r24, 0x00F0
    116a:	82 32       	cpi	r24, 0x22	; 34
    116c:	e0 f3       	brcs	.-8      	; 0x1166 <HMI_openAction+0x6c>

	g_Tick = 0;
    116e:	10 92 f0 00 	sts	0x00F0, r1
	Timer1_deInit();
    1172:	0e 94 9c 18 	call	0x3138	; 0x3138 <Timer1_deInit>
	HMI_options();
    1176:	0e 94 03 06 	call	0xc06	; 0xc06 <HMI_options>
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <HMI_Stuck>:

void HMI_Stuck(void){
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	g_Tick++;
    1188:	80 91 f0 00 	lds	r24, 0x00F0
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	80 93 f0 00 	sts	0x00F0, r24
}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <GPIO_setupPinDirection+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <GPIO_setupPinDirection+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	6a 83       	std	Y+2, r22	; 0x02
    11aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	88 30       	cpi	r24, 0x08	; 8
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <GPIO_setupPinDirection+0x1c>
    11b2:	d5 c0       	rjmp	.+426    	; 0x135e <GPIO_setupPinDirection+0x1c6>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	84 30       	cpi	r24, 0x04	; 4
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <GPIO_setupPinDirection+0x24>
    11ba:	d1 c0       	rjmp	.+418    	; 0x135e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3d 83       	std	Y+5, r19	; 0x05
    11c4:	2c 83       	std	Y+4, r18	; 0x04
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <GPIO_setupPinDirection+0x3a>
    11d0:	43 c0       	rjmp	.+134    	; 0x1258 <GPIO_setupPinDirection+0xc0>
    11d2:	2c 81       	ldd	r18, Y+4	; 0x04
    11d4:	3d 81       	ldd	r19, Y+5	; 0x05
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <GPIO_setupPinDirection+0x4e>
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	9d 81       	ldd	r25, Y+5	; 0x05
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	71 f0       	breq	.+28     	; 0x1200 <GPIO_setupPinDirection+0x68>
    11e4:	bc c0       	rjmp	.+376    	; 0x135e <GPIO_setupPinDirection+0x1c6>
    11e6:	2c 81       	ldd	r18, Y+4	; 0x04
    11e8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <GPIO_setupPinDirection+0x5a>
    11f0:	5f c0       	rjmp	.+190    	; 0x12b0 <GPIO_setupPinDirection+0x118>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <GPIO_setupPinDirection+0x66>
    11fc:	85 c0       	rjmp	.+266    	; 0x1308 <GPIO_setupPinDirection+0x170>
    11fe:	af c0       	rjmp	.+350    	; 0x135e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	a1 f4       	brne	.+40     	; 0x122e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1206:	aa e3       	ldi	r26, 0x3A	; 58
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ea e3       	ldi	r30, 0x3A	; 58
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_setupPinDirection+0x8c>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_setupPinDirection+0x88>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	98 c0       	rjmp	.+304    	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    122e:	aa e3       	ldi	r26, 0x3A	; 58
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_setupPinDirection+0xb4>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_setupPinDirection+0xb0>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	83 c0       	rjmp	.+262    	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	a1 f4       	brne	.+40     	; 0x1286 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    125e:	a7 e3       	ldi	r26, 0x37	; 55
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_setupPinDirection+0xe4>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_setupPinDirection+0xe0>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	6c c0       	rjmp	.+216    	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1286:	a7 e3       	ldi	r26, 0x37	; 55
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_setupPinDirection+0x10c>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_setupPinDirection+0x108>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	57 c0       	rjmp	.+174    	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	a1 f4       	brne	.+40     	; 0x12de <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12b6:	a4 e3       	ldi	r26, 0x34	; 52
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e4 e3       	ldi	r30, 0x34	; 52
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_setupPinDirection+0x13c>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_setupPinDirection+0x138>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	40 c0       	rjmp	.+128    	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12de:	a4 e3       	ldi	r26, 0x34	; 52
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_setupPinDirection+0x164>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_setupPinDirection+0x160>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	2b c0       	rjmp	.+86     	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    130e:	a1 e3       	ldi	r26, 0x31	; 49
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e1 e3       	ldi	r30, 0x31	; 49
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_setupPinDirection+0x194>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_setupPinDirection+0x190>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	14 c0       	rjmp	.+40     	; 0x135e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1336:	a1 e3       	ldi	r26, 0x31	; 49
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e1 e3       	ldi	r30, 0x31	; 49
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_setupPinDirection+0x1bc>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_setupPinDirection+0x1b8>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <GPIO_writePin+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <GPIO_writePin+0x8>
    1376:	0f 92       	push	r0
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	6a 83       	std	Y+2, r22	; 0x02
    1380:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	88 30       	cpi	r24, 0x08	; 8
    1386:	08 f0       	brcs	.+2      	; 0x138a <GPIO_writePin+0x1c>
    1388:	d5 c0       	rjmp	.+426    	; 0x1534 <GPIO_writePin+0x1c6>
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	08 f0       	brcs	.+2      	; 0x1392 <GPIO_writePin+0x24>
    1390:	d1 c0       	rjmp	.+418    	; 0x1534 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3d 83       	std	Y+5, r19	; 0x05
    139a:	2c 83       	std	Y+4, r18	; 0x04
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <GPIO_writePin+0x3a>
    13a6:	43 c0       	rjmp	.+134    	; 0x142e <GPIO_writePin+0xc0>
    13a8:	2c 81       	ldd	r18, Y+4	; 0x04
    13aa:	3d 81       	ldd	r19, Y+5	; 0x05
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <GPIO_writePin+0x4e>
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	9d 81       	ldd	r25, Y+5	; 0x05
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <GPIO_writePin+0x68>
    13ba:	bc c0       	rjmp	.+376    	; 0x1534 <GPIO_writePin+0x1c6>
    13bc:	2c 81       	ldd	r18, Y+4	; 0x04
    13be:	3d 81       	ldd	r19, Y+5	; 0x05
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <GPIO_writePin+0x5a>
    13c6:	5f c0       	rjmp	.+190    	; 0x1486 <GPIO_writePin+0x118>
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9d 81       	ldd	r25, Y+5	; 0x05
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <GPIO_writePin+0x66>
    13d2:	85 c0       	rjmp	.+266    	; 0x14de <GPIO_writePin+0x170>
    13d4:	af c0       	rjmp	.+350    	; 0x1534 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	a1 f4       	brne	.+40     	; 0x1404 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13dc:	ab e3       	ldi	r26, 0x3B	; 59
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_writePin+0x8c>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_writePin+0x88>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	98 c0       	rjmp	.+304    	; 0x1534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1404:	ab e3       	ldi	r26, 0x3B	; 59
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	eb e3       	ldi	r30, 0x3B	; 59
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_writePin+0xb4>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_writePin+0xb0>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	83 c0       	rjmp	.+262    	; 0x1534 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0xe4>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0xe0>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	6c c0       	rjmp	.+216    	; 0x1534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    145c:	a8 e3       	ldi	r26, 0x38	; 56
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e8 e3       	ldi	r30, 0x38	; 56
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_writePin+0x10c>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_writePin+0x108>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	57 c0       	rjmp	.+174    	; 0x1534 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	a1 f4       	brne	.+40     	; 0x14b4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    148c:	a5 e3       	ldi	r26, 0x35	; 53
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e3       	ldi	r30, 0x35	; 53
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_writePin+0x13c>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_writePin+0x138>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	40 c0       	rjmp	.+128    	; 0x1534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14b4:	a5 e3       	ldi	r26, 0x35	; 53
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e5 e3       	ldi	r30, 0x35	; 53
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_writePin+0x164>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_writePin+0x160>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	2b c0       	rjmp	.+86     	; 0x1534 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	a1 f4       	brne	.+40     	; 0x150c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14e4:	a2 e3       	ldi	r26, 0x32	; 50
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e2 e3       	ldi	r30, 0x32	; 50
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_writePin+0x194>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_writePin+0x190>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_writePin+0x1bc>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_writePin+0x1b8>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <GPIO_readPin+0x6>
    154a:	00 d0       	rcall	.+0      	; 0x154c <GPIO_readPin+0x8>
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1556:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 30       	cpi	r24, 0x08	; 8
    155c:	08 f0       	brcs	.+2      	; 0x1560 <GPIO_readPin+0x1c>
    155e:	84 c0       	rjmp	.+264    	; 0x1668 <GPIO_readPin+0x124>
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	08 f0       	brcs	.+2      	; 0x1568 <GPIO_readPin+0x24>
    1566:	80 c0       	rjmp	.+256    	; 0x1668 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3d 83       	std	Y+5, r19	; 0x05
    1570:	2c 83       	std	Y+4, r18	; 0x04
    1572:	4c 81       	ldd	r20, Y+4	; 0x04
    1574:	5d 81       	ldd	r21, Y+5	; 0x05
    1576:	41 30       	cpi	r20, 0x01	; 1
    1578:	51 05       	cpc	r21, r1
    157a:	79 f1       	breq	.+94     	; 0x15da <GPIO_readPin+0x96>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	91 05       	cpc	r25, r1
    1584:	34 f4       	brge	.+12     	; 0x1592 <GPIO_readPin+0x4e>
    1586:	2c 81       	ldd	r18, Y+4	; 0x04
    1588:	3d 81       	ldd	r19, Y+5	; 0x05
    158a:	21 15       	cp	r18, r1
    158c:	31 05       	cpc	r19, r1
    158e:	69 f0       	breq	.+26     	; 0x15aa <GPIO_readPin+0x66>
    1590:	6b c0       	rjmp	.+214    	; 0x1668 <GPIO_readPin+0x124>
    1592:	4c 81       	ldd	r20, Y+4	; 0x04
    1594:	5d 81       	ldd	r21, Y+5	; 0x05
    1596:	42 30       	cpi	r20, 0x02	; 2
    1598:	51 05       	cpc	r21, r1
    159a:	b9 f1       	breq	.+110    	; 0x160a <GPIO_readPin+0xc6>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <GPIO_readPin+0x64>
    15a6:	49 c0       	rjmp	.+146    	; 0x163a <GPIO_readPin+0xf6>
    15a8:	5f c0       	rjmp	.+190    	; 0x1668 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15aa:	e9 e3       	ldi	r30, 0x39	; 57
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a9 01       	movw	r20, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_readPin+0x7e>
    15be:	55 95       	asr	r21
    15c0:	47 95       	ror	r20
    15c2:	8a 95       	dec	r24
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_readPin+0x7a>
    15c6:	ca 01       	movw	r24, r20
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	88 23       	and	r24, r24
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	49 c0       	rjmp	.+146    	; 0x1668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	47 c0       	rjmp	.+142    	; 0x1668 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15da:	e6 e3       	ldi	r30, 0x36	; 54
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_readPin+0xae>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_readPin+0xaa>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	88 23       	and	r24, r24
    15fe:	19 f0       	breq	.+6      	; 0x1606 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	31 c0       	rjmp	.+98     	; 0x1668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	2f c0       	rjmp	.+94     	; 0x1668 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    160a:	e3 e3       	ldi	r30, 0x33	; 51
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_readPin+0xde>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_readPin+0xda>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	88 23       	and	r24, r24
    162e:	19 f0       	breq	.+6      	; 0x1636 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	19 c0       	rjmp	.+50     	; 0x1668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	17 c0       	rjmp	.+46     	; 0x1668 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    163a:	e0 e3       	ldi	r30, 0x30	; 48
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GPIO_readPin+0x10e>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <GPIO_readPin+0x10a>
    1656:	ca 01       	movw	r24, r20
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	88 23       	and	r24, r24
    165e:	19 f0       	breq	.+6      	; 0x1666 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1666:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <GPIO_setupPortDirection+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <GPIO_setupPortDirection+0x8>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	84 30       	cpi	r24, 0x04	; 4
    168e:	90 f5       	brcc	.+100    	; 0x16f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3c 83       	std	Y+4, r19	; 0x04
    1698:	2b 83       	std	Y+3, r18	; 0x03
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	d1 f0       	breq	.+52     	; 0x16d8 <GPIO_setupPortDirection+0x5e>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <GPIO_setupPortDirection+0x3e>
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	61 f0       	breq	.+24     	; 0x16ce <GPIO_setupPortDirection+0x54>
    16b6:	1e c0       	rjmp	.+60     	; 0x16f4 <GPIO_setupPortDirection+0x7a>
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <GPIO_setupPortDirection+0x68>
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	81 f0       	breq	.+32     	; 0x16ec <GPIO_setupPortDirection+0x72>
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16ce:	ea e3       	ldi	r30, 0x3A	; 58
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	80 83       	st	Z, r24
    16d6:	0e c0       	rjmp	.+28     	; 0x16f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16d8:	e7 e3       	ldi	r30, 0x37	; 55
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	80 83       	st	Z, r24
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16e2:	e4 e3       	ldi	r30, 0x34	; 52
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	80 83       	st	Z, r24
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16ec:	e1 e3       	ldi	r30, 0x31	; 49
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <GPIO_writePort+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <GPIO_writePort+0x8>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	84 30       	cpi	r24, 0x04	; 4
    1716:	90 f5       	brcc	.+100    	; 0x177c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3c 83       	std	Y+4, r19	; 0x04
    1720:	2b 83       	std	Y+3, r18	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	d1 f0       	breq	.+52     	; 0x1760 <GPIO_writePort+0x5e>
    172c:	2b 81       	ldd	r18, Y+3	; 0x03
    172e:	3c 81       	ldd	r19, Y+4	; 0x04
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	2c f4       	brge	.+10     	; 0x1740 <GPIO_writePort+0x3e>
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	61 f0       	breq	.+24     	; 0x1756 <GPIO_writePort+0x54>
    173e:	1e c0       	rjmp	.+60     	; 0x177c <GPIO_writePort+0x7a>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	81 f0       	breq	.+32     	; 0x176a <GPIO_writePort+0x68>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	91 05       	cpc	r25, r1
    1752:	81 f0       	breq	.+32     	; 0x1774 <GPIO_writePort+0x72>
    1754:	13 c0       	rjmp	.+38     	; 0x177c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1756:	eb e3       	ldi	r30, 0x3B	; 59
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	80 83       	st	Z, r24
    175e:	0e c0       	rjmp	.+28     	; 0x177c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1760:	e8 e3       	ldi	r30, 0x38	; 56
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	80 83       	st	Z, r24
    1768:	09 c0       	rjmp	.+18     	; 0x177c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    176a:	e5 e3       	ldi	r30, 0x35	; 53
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	80 83       	st	Z, r24
    1772:	04 c0       	rjmp	.+8      	; 0x177c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	80 83       	st	Z, r24
			break;
		}
	}
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <GPIO_readPort+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <GPIO_readPort+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1798:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	90 f5       	brcc	.+100    	; 0x1804 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3c 83       	std	Y+4, r19	; 0x04
    17a8:	2b 83       	std	Y+3, r18	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	d1 f0       	breq	.+52     	; 0x17e8 <GPIO_readPort+0x5e>
    17b4:	2b 81       	ldd	r18, Y+3	; 0x03
    17b6:	3c 81       	ldd	r19, Y+4	; 0x04
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <GPIO_readPort+0x3e>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	61 f0       	breq	.+24     	; 0x17de <GPIO_readPort+0x54>
    17c6:	1e c0       	rjmp	.+60     	; 0x1804 <GPIO_readPort+0x7a>
    17c8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ca:	3c 81       	ldd	r19, Y+4	; 0x04
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	81 f0       	breq	.+32     	; 0x17f2 <GPIO_readPort+0x68>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	81 f0       	breq	.+32     	; 0x17fc <GPIO_readPort+0x72>
    17dc:	13 c0       	rjmp	.+38     	; 0x1804 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17de:	e9 e3       	ldi	r30, 0x39	; 57
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17e8:	e6 e3       	ldi	r30, 0x36	; 54
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17f2:	e3 e3       	ldi	r30, 0x33	; 51
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17fc:	e0 e3       	ldi	r30, 0x30	; 48
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <KEYPAD_getPressedKey+0x6>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while (1)
	{
		for (col = 0; col < KEYPAD_NUM_COLS; col++)
    181e:	1a 82       	std	Y+2, r1	; 0x02
    1820:	45 c0       	rjmp	.+138    	; 0x18ac <KEYPAD_getPressedKey+0x98>
		{
			KEYPAD_PORT_DIRECTION = (0x10 << col);
    1822:	ea e3       	ldi	r30, 0x3A	; 58
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	80 e1       	ldi	r24, 0x10	; 16
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <KEYPAD_getPressedKey+0x22>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	2a 95       	dec	r18
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <KEYPAD_getPressedKey+0x1e>
    183a:	80 83       	st	Z, r24
			GPIO_writePin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,KEYPAD_BUTTON_PRESSED);
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	98 2f       	mov	r25, r24
    1840:	9c 5f       	subi	r25, 0xFC	; 252
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	69 2f       	mov	r22, r25
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>

			for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    184c:	19 82       	std	Y+1, r1	; 0x01
    184e:	28 c0       	rjmp	.+80     	; 0x18a0 <KEYPAD_getPressedKey+0x8c>
			{
				if (BIT_IS_CLEAR(KEYPAD_INPUT_PORT, row))
    1850:	e9 e3       	ldi	r30, 0x39	; 57
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a9 01       	movw	r20, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <KEYPAD_getPressedKey+0x54>
    1864:	55 95       	asr	r21
    1866:	47 95       	ror	r20
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <KEYPAD_getPressedKey+0x50>
    186c:	ca 01       	movw	r24, r20
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	90 70       	andi	r25, 0x00	; 0
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	91 f4       	brne	.+36     	; 0x189a <KEYPAD_getPressedKey+0x86>
				{
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	98 2f       	mov	r25, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	89 0f       	add	r24, r25
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
		}
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret
		for (col = 0; col < KEYPAD_NUM_COLS; col++)
		{
			KEYPAD_PORT_DIRECTION = (0x10 << col);
			GPIO_writePin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,KEYPAD_BUTTON_PRESSED);

			for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	84 30       	cpi	r24, 0x04	; 4
    18a4:	a8 f2       	brcs	.-86     	; 0x1850 <KEYPAD_getPressedKey+0x3c>
uint8 KEYPAD_getPressedKey(void)
{
	uint8 col,row;
	while (1)
	{
		for (col = 0; col < KEYPAD_NUM_COLS; col++)
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	8a 83       	std	Y+2, r24	; 0x02
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	08 f4       	brcc	.+2      	; 0x18b4 <KEYPAD_getPressedKey+0xa0>
    18b2:	b7 cf       	rjmp	.-146    	; 0x1822 <KEYPAD_getPressedKey+0xe>
    18b4:	b4 cf       	rjmp	.-152    	; 0x181e <KEYPAD_getPressedKey+0xa>

000018b6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <KEYPAD_4x4_adjustKeyNumber+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x8>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18c4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3c 83       	std	Y+4, r19	; 0x04
    18ce:	2b 83       	std	Y+3, r18	; 0x03
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	91 05       	cpc	r25, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <KEYPAD_4x4_adjustKeyNumber+0x26>
    18da:	70 c0       	rjmp	.+224    	; 0x19bc <KEYPAD_4x4_adjustKeyNumber+0x106>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	29 30       	cpi	r18, 0x09	; 9
    18e2:	31 05       	cpc	r19, r1
    18e4:	5c f5       	brge	.+86     	; 0x193c <KEYPAD_4x4_adjustKeyNumber+0x86>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    18f0:	59 c0       	rjmp	.+178    	; 0x19a4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	25 30       	cpi	r18, 0x05	; 5
    18f8:	31 05       	cpc	r19, r1
    18fa:	9c f4       	brge	.+38     	; 0x1922 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1906:	48 c0       	rjmp	.+144    	; 0x1998 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1908:	2b 81       	ldd	r18, Y+3	; 0x03
    190a:	3c 81       	ldd	r19, Y+4	; 0x04
    190c:	23 30       	cpi	r18, 0x03	; 3
    190e:	31 05       	cpc	r19, r1
    1910:	0c f0       	brlt	.+2      	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1912:	45 c0       	rjmp	.+138    	; 0x199e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    191e:	39 c0       	rjmp	.+114    	; 0x1992 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1920:	67 c0       	rjmp	.+206    	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	26 30       	cpi	r18, 0x06	; 6
    1928:	31 05       	cpc	r19, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <KEYPAD_4x4_adjustKeyNumber+0x78>
    192c:	41 c0       	rjmp	.+130    	; 0x19b0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	87 30       	cpi	r24, 0x07	; 7
    1934:	91 05       	cpc	r25, r1
    1936:	0c f0       	brlt	.+2      	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1938:	3e c0       	rjmp	.+124    	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    193a:	37 c0       	rjmp	.+110    	; 0x19aa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    193c:	2b 81       	ldd	r18, Y+3	; 0x03
    193e:	3c 81       	ldd	r19, Y+4	; 0x04
    1940:	2c 30       	cpi	r18, 0x0C	; 12
    1942:	31 05       	cpc	r19, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1946:	46 c0       	rjmp	.+140    	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	8d 30       	cpi	r24, 0x0D	; 13
    194e:	91 05       	cpc	r25, r1
    1950:	5c f4       	brge	.+22     	; 0x1968 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	2a 30       	cpi	r18, 0x0A	; 10
    1958:	31 05       	cpc	r19, r1
    195a:	b1 f1       	breq	.+108    	; 0x19c8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	8b 30       	cpi	r24, 0x0B	; 11
    1962:	91 05       	cpc	r25, r1
    1964:	a4 f5       	brge	.+104    	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0x118>
    1966:	2d c0       	rjmp	.+90     	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1968:	2b 81       	ldd	r18, Y+3	; 0x03
    196a:	3c 81       	ldd	r19, Y+4	; 0x04
    196c:	2e 30       	cpi	r18, 0x0E	; 14
    196e:	31 05       	cpc	r19, r1
    1970:	b9 f1       	breq	.+110    	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	8e 30       	cpi	r24, 0x0E	; 14
    1978:	91 05       	cpc	r25, r1
    197a:	7c f1       	brlt	.+94     	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x124>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	2f 30       	cpi	r18, 0x0F	; 15
    1982:	31 05       	cpc	r19, r1
    1984:	79 f1       	breq	.+94     	; 0x19e4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	80 31       	cpi	r24, 0x10	; 16
    198c:	91 05       	cpc	r25, r1
    198e:	69 f1       	breq	.+90     	; 0x19ea <KEYPAD_4x4_adjustKeyNumber+0x134>
    1990:	2f c0       	rjmp	.+94     	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1992:	87 e0       	ldi	r24, 0x07	; 7
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	2e c0       	rjmp	.+92     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1998:	88 e0       	ldi	r24, 0x08	; 8
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	2b c0       	rjmp	.+86     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    199e:	89 e0       	ldi	r24, 0x09	; 9
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	28 c0       	rjmp	.+80     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19a4:	85 e2       	ldi	r24, 0x25	; 37
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	25 c0       	rjmp	.+74     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19aa:	84 e0       	ldi	r24, 0x04	; 4
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	22 c0       	rjmp	.+68     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19b0:	85 e0       	ldi	r24, 0x05	; 5
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	1f c0       	rjmp	.+62     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19b6:	86 e0       	ldi	r24, 0x06	; 6
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	1c c0       	rjmp	.+56     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19bc:	8a e2       	ldi	r24, 0x2A	; 42
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	19 c0       	rjmp	.+50     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	16 c0       	rjmp	.+44     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	13 c0       	rjmp	.+38     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	10 c0       	rjmp	.+32     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19d4:	8d e2       	ldi	r24, 0x2D	; 45
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19da:	8d e0       	ldi	r24, 0x0D	; 13
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    19e0:	19 82       	std	Y+1, r1	; 0x01
    19e2:	08 c0       	rjmp	.+16     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19e4:	8d e3       	ldi	r24, 0x3D	; 61
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    19ea:	8b e2       	ldi	r24, 0x2B	; 43
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	62 e0       	ldi	r22, 0x02	; 2
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPinDirection>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 ea       	ldi	r26, 0xA0	; 160
    1a32:	b1 e4       	ldi	r27, 0x41	; 65
    1a34:	8b 87       	std	Y+11, r24	; 0x0b
    1a36:	9c 87       	std	Y+12, r25	; 0x0c
    1a38:	ad 87       	std	Y+13, r26	; 0x0d
    1a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a ef       	ldi	r20, 0xFA	; 250
    1a4a:	54 e4       	ldi	r21, 0x44	; 68
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8f 83       	std	Y+7, r24	; 0x07
    1a56:	98 87       	std	Y+8, r25	; 0x08
    1a58:	a9 87       	std	Y+9, r26	; 0x09
    1a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5e:	78 85       	ldd	r23, Y+8	; 0x08
    1a60:	89 85       	ldd	r24, Y+9	; 0x09
    1a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_init+0x7a>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_init+0xda>
    1ac0:	88 ec       	ldi	r24, 0xC8	; 200
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_init+0xc8>
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_init+0xbc>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_init+0x104>
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	64 e0       	ldi	r22, 0x04	; 4
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	66 e0       	ldi	r22, 0x06	; 6
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b38:	83 e3       	ldi	r24, 0x33	; 51
    1b3a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b3e:	82 e3       	ldi	r24, 0x32	; 50
    1b40:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b44:	88 e2       	ldi	r24, 0x28	; 40
    1b46:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b4a:	8c e0       	ldi	r24, 0x0C	; 12
    1b4c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
}
    1b56:	2e 96       	adiw	r28, 0x0e	; 14
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	c3 56       	subi	r28, 0x63	; 99
    1b76:	d0 40       	sbci	r29, 0x00	; 0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	fe 01       	movw	r30, r28
    1b84:	ed 59       	subi	r30, 0x9D	; 157
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    1b94:	fe 01       	movw	r30, r28
    1b96:	e1 5a       	subi	r30, 0xA1	; 161
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ba0:	bf e3       	ldi	r27, 0x3F	; 63
    1ba2:	80 83       	st	Z, r24
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	a2 83       	std	Z+2, r26	; 0x02
    1ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1baa:	8e 01       	movw	r16, r28
    1bac:	05 5a       	subi	r16, 0xA5	; 165
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e1 5a       	subi	r30, 0xA1	; 161
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a ef       	ldi	r20, 0xFA	; 250
    1bc4:	54 e4       	ldi	r21, 0x44	; 68
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	f8 01       	movw	r30, r16
    1bd0:	80 83       	st	Z, r24
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	a2 83       	std	Z+2, r26	; 0x02
    1bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 5a       	subi	r30, 0xA5	; 165
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	44 f4       	brge	.+16     	; 0x1c06 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e7 5a       	subi	r30, 0xA7	; 167
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    1c04:	64 c0       	rjmp	.+200    	; 0x1cce <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c06:	fe 01       	movw	r30, r28
    1c08:	e5 5a       	subi	r30, 0xA5	; 165
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	0c f0       	brlt	.+2      	; 0x1c26 <LCD_sendCommand+0xbe>
    1c24:	43 c0       	rjmp	.+134    	; 0x1cac <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	fe 01       	movw	r30, r28
    1c28:	e1 5a       	subi	r30, 0xA1	; 161
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e2       	ldi	r20, 0x20	; 32
    1c3a:	51 e4       	ldi	r21, 0x41	; 65
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8e 01       	movw	r16, r28
    1c46:	07 5a       	subi	r16, 0xA7	; 167
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	f8 01       	movw	r30, r16
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	1f c0       	rjmp	.+62     	; 0x1c9c <LCD_sendCommand+0x134>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e9 5a       	subi	r30, 0xA9	; 169
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e9 5a       	subi	r30, 0xA9	; 169
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_sendCommand+0x10e>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5a       	subi	r30, 0xA9	; 169
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	de 01       	movw	r26, r28
    1c86:	a7 5a       	subi	r26, 0xA7	; 167
    1c88:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 5a       	subi	r30, 0xA7	; 167
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	11 96       	adiw	r26, 0x01	; 1
    1c98:	9c 93       	st	X, r25
    1c9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	d1 f6       	brne	.-76     	; 0x1c5e <LCD_sendCommand+0xf6>
    1caa:	27 c0       	rjmp	.+78     	; 0x1cfa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	8e 01       	movw	r16, r28
    1cae:	07 5a       	subi	r16, 0xA7	; 167
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e5 5a       	subi	r30, 0xA5	; 165
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	f8 01       	movw	r30, r16
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	de 01       	movw	r26, r28
    1cd0:	ab 5a       	subi	r26, 0xAB	; 171
    1cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e7 5a       	subi	r30, 0xA7	; 167
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	8d 93       	st	X+, r24
    1ce0:	9c 93       	st	X, r25
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	eb 5a       	subi	r30, 0xAB	; 171
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_sendCommand+0x184>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	eb 5a       	subi	r30, 0xAB	; 171
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	62 e0       	ldi	r22, 0x02	; 2
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    1d04:	fe 01       	movw	r30, r28
    1d06:	ef 5a       	subi	r30, 0xAF	; 175
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e8       	ldi	r26, 0x80	; 128
    1d10:	bf e3       	ldi	r27, 0x3F	; 63
    1d12:	80 83       	st	Z, r24
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	03 5b       	subi	r16, 0xB3	; 179
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 5a       	subi	r30, 0xAF	; 175
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 83       	st	Z, r24
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	a2 83       	std	Z+2, r26	; 0x02
    1d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e3 5b       	subi	r30, 0xB3	; 179
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	44 f4       	brge	.+16     	; 0x1d76 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d66:	fe 01       	movw	r30, r28
    1d68:	e5 5b       	subi	r30, 0xB5	; 181
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24
    1d74:	64 c0       	rjmp	.+200    	; 0x1e3e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d76:	fe 01       	movw	r30, r28
    1d78:	e3 5b       	subi	r30, 0xB3	; 179
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	0c f0       	brlt	.+2      	; 0x1d96 <LCD_sendCommand+0x22e>
    1d94:	43 c0       	rjmp	.+134    	; 0x1e1c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	fe 01       	movw	r30, r28
    1d98:	ef 5a       	subi	r30, 0xAF	; 175
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8e 01       	movw	r16, r28
    1db6:	05 5b       	subi	r16, 0xB5	; 181
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	1f c0       	rjmp	.+62     	; 0x1e0c <LCD_sendCommand+0x2a4>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e7 5b       	subi	r30, 0xB7	; 183
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e7 5b       	subi	r30, 0xB7	; 183
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_sendCommand+0x27e>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5b       	subi	r30, 0xB7	; 183
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	de 01       	movw	r26, r28
    1df6:	a5 5b       	subi	r26, 0xB5	; 181
    1df8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e5 5b       	subi	r30, 0xB5	; 181
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	11 96       	adiw	r26, 0x01	; 1
    1e08:	9c 93       	st	X, r25
    1e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e5 5b       	subi	r30, 0xB5	; 181
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	d1 f6       	brne	.-76     	; 0x1dce <LCD_sendCommand+0x266>
    1e1a:	27 c0       	rjmp	.+78     	; 0x1e6a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	05 5b       	subi	r16, 0xB5	; 181
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	e3 5b       	subi	r30, 0xB3	; 179
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	de 01       	movw	r26, r28
    1e40:	a9 5b       	subi	r26, 0xB9	; 185
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e5 5b       	subi	r30, 0xB5	; 181
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	8d 93       	st	X+, r24
    1e50:	9c 93       	st	X, r25
    1e52:	fe 01       	movw	r30, r28
    1e54:	e9 5b       	subi	r30, 0xB9	; 185
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0x2f4>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 5b       	subi	r30, 0xB9	; 185
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 59       	subi	r30, 0x9D	; 157
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	80 71       	andi	r24, 0x10	; 16
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	95 95       	asr	r25
    1e80:	87 95       	ror	r24
    1e82:	95 95       	asr	r25
    1e84:	87 95       	ror	r24
    1e86:	95 95       	asr	r25
    1e88:	87 95       	ror	r24
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	63 e0       	ldi	r22, 0x03	; 3
    1e90:	49 2f       	mov	r20, r25
    1e92:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 59       	subi	r30, 0x9D	; 157
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	80 72       	andi	r24, 0x20	; 32
    1ea4:	90 70       	andi	r25, 0x00	; 0
    1ea6:	95 95       	asr	r25
    1ea8:	87 95       	ror	r24
    1eaa:	95 95       	asr	r25
    1eac:	87 95       	ror	r24
    1eae:	95 95       	asr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	98 2f       	mov	r25, r24
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	49 2f       	mov	r20, r25
    1ec2:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ed 59       	subi	r30, 0x9D	; 157
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	80 74       	andi	r24, 0x40	; 64
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	08 2e       	mov	r0, r24
    1ed8:	89 2f       	mov	r24, r25
    1eda:	00 0c       	add	r0, r0
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 0b       	sbc	r25, r25
    1ee0:	00 0c       	add	r0, r0
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	65 e0       	ldi	r22, 0x05	; 5
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ed 59       	subi	r30, 0x9D	; 157
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	98 2f       	mov	r25, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	99 27       	eor	r25, r25
    1f00:	99 1f       	adc	r25, r25
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	49 2f       	mov	r20, r25
    1f08:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ed 5b       	subi	r30, 0xBD	; 189
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e8       	ldi	r26, 0x80	; 128
    1f18:	bf e3       	ldi	r27, 0x3F	; 63
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	8e 01       	movw	r16, r28
    1f24:	01 5c       	subi	r16, 0xC1	; 193
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ed 5b       	subi	r30, 0xBD	; 189
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	80 83       	st	Z, r24
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	a2 83       	std	Z+2, r26	; 0x02
    1f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f50:	fe 01       	movw	r30, r28
    1f52:	ff 96       	adiw	r30, 0x3f	; 63
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e af       	std	Y+62, r25	; 0x3e
    1f72:	8d af       	std	Y+61, r24	; 0x3d
    1f74:	46 c0       	rjmp	.+140    	; 0x2002 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f76:	fe 01       	movw	r30, r28
    1f78:	ff 96       	adiw	r30, 0x3f	; 63
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	64 f5       	brge	.+88     	; 0x1fea <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	fe 01       	movw	r30, r28
    1f94:	ed 5b       	subi	r30, 0xBD	; 189
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e af       	std	Y+62, r25	; 0x3e
    1fbe:	8d af       	std	Y+61, r24	; 0x3d
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_sendCommand+0x478>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9c af       	std	Y+60, r25	; 0x3c
    1fc8:	8b af       	std	Y+59, r24	; 0x3b
    1fca:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_sendCommand+0x466>
    1fd2:	9c af       	std	Y+60, r25	; 0x3c
    1fd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9e af       	std	Y+62, r25	; 0x3e
    1fde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_sendCommand+0x45a>
    1fe8:	16 c0       	rjmp	.+44     	; 0x2016 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	fe 01       	movw	r30, r28
    1fec:	ff 96       	adiw	r30, 0x3f	; 63
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e af       	std	Y+62, r25	; 0x3e
    2000:	8d af       	std	Y+61, r24	; 0x3d
    2002:	8d ad       	ldd	r24, Y+61	; 0x3d
    2004:	9e ad       	ldd	r25, Y+62	; 0x3e
    2006:	9a af       	std	Y+58, r25	; 0x3a
    2008:	89 af       	std	Y+57, r24	; 0x39
    200a:	89 ad       	ldd	r24, Y+57	; 0x39
    200c:	9a ad       	ldd	r25, Y+58	; 0x3a
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_sendCommand+0x4a6>
    2012:	9a af       	std	Y+58, r25	; 0x3a
    2014:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	8d ab       	std	Y+53, r24	; 0x35
    202a:	9e ab       	std	Y+54, r25	; 0x36
    202c:	af ab       	std	Y+55, r26	; 0x37
    202e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6d a9       	ldd	r22, Y+53	; 0x35
    2032:	7e a9       	ldd	r23, Y+54	; 0x36
    2034:	8f a9       	ldd	r24, Y+55	; 0x37
    2036:	98 ad       	ldd	r25, Y+56	; 0x38
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a ef       	ldi	r20, 0xFA	; 250
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	89 ab       	std	Y+49, r24	; 0x31
    204a:	9a ab       	std	Y+50, r25	; 0x32
    204c:	ab ab       	std	Y+51, r26	; 0x33
    204e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	98 ab       	std	Y+48, r25	; 0x30
    206e:	8f a7       	std	Y+47, r24	; 0x2f
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2072:	69 a9       	ldd	r22, Y+49	; 0x31
    2074:	7a a9       	ldd	r23, Y+50	; 0x32
    2076:	8b a9       	ldd	r24, Y+51	; 0x33
    2078:	9c a9       	ldd	r25, Y+52	; 0x34
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6d a9       	ldd	r22, Y+53	; 0x35
    208c:	7e a9       	ldd	r23, Y+54	; 0x36
    208e:	8f a9       	ldd	r24, Y+55	; 0x37
    2090:	98 ad       	ldd	r25, Y+56	; 0x38
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	98 ab       	std	Y+48, r25	; 0x30
    20b0:	8f a7       	std	Y+47, r24	; 0x2f
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <LCD_sendCommand+0x56a>
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e a7       	std	Y+46, r25	; 0x2e
    20ba:	8d a7       	std	Y+45, r24	; 0x2d
    20bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    20be:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendCommand+0x558>
    20c4:	9e a7       	std	Y+46, r25	; 0x2e
    20c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ca:	98 a9       	ldd	r25, Y+48	; 0x30
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	98 ab       	std	Y+48, r25	; 0x30
    20d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d4:	98 a9       	ldd	r25, Y+48	; 0x30
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <LCD_sendCommand+0x54c>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	69 a9       	ldd	r22, Y+49	; 0x31
    20de:	7a a9       	ldd	r23, Y+50	; 0x32
    20e0:	8b a9       	ldd	r24, Y+51	; 0x33
    20e2:	9c a9       	ldd	r25, Y+52	; 0x34
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	98 ab       	std	Y+48, r25	; 0x30
    20ee:	8f a7       	std	Y+47, r24	; 0x2f
    20f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f2:	98 a9       	ldd	r25, Y+48	; 0x30
    20f4:	9c a7       	std	Y+44, r25	; 0x2c
    20f6:	8b a7       	std	Y+43, r24	; 0x2b
    20f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_sendCommand+0x594>
    2100:	9c a7       	std	Y+44, r25	; 0x2c
    2102:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e8       	ldi	r26, 0x80	; 128
    2114:	bf e3       	ldi	r27, 0x3F	; 63
    2116:	8f a3       	std	Y+39, r24	; 0x27
    2118:	98 a7       	std	Y+40, r25	; 0x28
    211a:	a9 a7       	std	Y+41, r26	; 0x29
    211c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	6f a1       	ldd	r22, Y+39	; 0x27
    2120:	78 a5       	ldd	r23, Y+40	; 0x28
    2122:	89 a5       	ldd	r24, Y+41	; 0x29
    2124:	9a a5       	ldd	r25, Y+42	; 0x2a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a ef       	ldi	r20, 0xFA	; 250
    212c:	54 e4       	ldi	r21, 0x44	; 68
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8b a3       	std	Y+35, r24	; 0x23
    2138:	9c a3       	std	Y+36, r25	; 0x24
    213a:	ad a3       	std	Y+37, r26	; 0x25
    213c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    213e:	6b a1       	ldd	r22, Y+35	; 0x23
    2140:	7c a1       	ldd	r23, Y+36	; 0x24
    2142:	8d a1       	ldd	r24, Y+37	; 0x25
    2144:	9e a1       	ldd	r25, Y+38	; 0x26
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	2c f4       	brge	.+10     	; 0x2160 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9a a3       	std	Y+34, r25	; 0x22
    215c:	89 a3       	std	Y+33, r24	; 0x21
    215e:	3f c0       	rjmp	.+126    	; 0x21de <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	4c f5       	brge	.+82     	; 0x21ca <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	6f a1       	ldd	r22, Y+39	; 0x27
    217a:	78 a5       	ldd	r23, Y+40	; 0x28
    217c:	89 a5       	ldd	r24, Y+41	; 0x29
    217e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9a a3       	std	Y+34, r25	; 0x22
    219e:	89 a3       	std	Y+33, r24	; 0x21
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <LCD_sendCommand+0x658>
    21a2:	88 ec       	ldi	r24, 0xC8	; 200
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	98 a3       	std	Y+32, r25	; 0x20
    21a8:	8f 8f       	std	Y+31, r24	; 0x1f
    21aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ac:	98 a1       	ldd	r25, Y+32	; 0x20
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_sendCommand+0x646>
    21b2:	98 a3       	std	Y+32, r25	; 0x20
    21b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	89 a1       	ldd	r24, Y+33	; 0x21
    21b8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9a a3       	std	Y+34, r25	; 0x22
    21be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	89 a1       	ldd	r24, Y+33	; 0x21
    21c2:	9a a1       	ldd	r25, Y+34	; 0x22
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <LCD_sendCommand+0x63a>
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	6b a1       	ldd	r22, Y+35	; 0x23
    21cc:	7c a1       	ldd	r23, Y+36	; 0x24
    21ce:	8d a1       	ldd	r24, Y+37	; 0x25
    21d0:	9e a1       	ldd	r25, Y+38	; 0x26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9a a3       	std	Y+34, r25	; 0x22
    21dc:	89 a3       	std	Y+33, r24	; 0x21
    21de:	89 a1       	ldd	r24, Y+33	; 0x21
    21e0:	9a a1       	ldd	r25, Y+34	; 0x22
    21e2:	9e 8f       	std	Y+30, r25	; 0x1e
    21e4:	8d 8f       	std	Y+29, r24	; 0x1d
    21e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_sendCommand+0x682>
    21ee:	9e 8f       	std	Y+30, r25	; 0x1e
    21f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    21f2:	fe 01       	movw	r30, r28
    21f4:	ed 59       	subi	r30, 0x9D	; 157
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	98 2f       	mov	r25, r24
    21fc:	91 70       	andi	r25, 0x01	; 1
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	63 e0       	ldi	r22, 0x03	; 3
    2202:	49 2f       	mov	r20, r25
    2204:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2208:	fe 01       	movw	r30, r28
    220a:	ed 59       	subi	r30, 0x9D	; 157
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	82 70       	andi	r24, 0x02	; 2
    2216:	90 70       	andi	r25, 0x00	; 0
    2218:	95 95       	asr	r25
    221a:	87 95       	ror	r24
    221c:	98 2f       	mov	r25, r24
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	64 e0       	ldi	r22, 0x04	; 4
    2222:	49 2f       	mov	r20, r25
    2224:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2228:	fe 01       	movw	r30, r28
    222a:	ed 59       	subi	r30, 0x9D	; 157
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	84 70       	andi	r24, 0x04	; 4
    2236:	90 70       	andi	r25, 0x00	; 0
    2238:	95 95       	asr	r25
    223a:	87 95       	ror	r24
    223c:	95 95       	asr	r25
    223e:	87 95       	ror	r24
    2240:	98 2f       	mov	r25, r24
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	65 e0       	ldi	r22, 0x05	; 5
    2246:	49 2f       	mov	r20, r25
    2248:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    224c:	fe 01       	movw	r30, r28
    224e:	ed 59       	subi	r30, 0x9D	; 157
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	88 70       	andi	r24, 0x08	; 8
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	95 95       	asr	r25
    225e:	87 95       	ror	r24
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	98 2f       	mov	r25, r24
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	66 e0       	ldi	r22, 0x06	; 6
    226e:	49 2f       	mov	r20, r25
    2270:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	89 8f       	std	Y+25, r24	; 0x19
    227e:	9a 8f       	std	Y+26, r25	; 0x1a
    2280:	ab 8f       	std	Y+27, r26	; 0x1b
    2282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	69 8d       	ldd	r22, Y+25	; 0x19
    2286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a ef       	ldi	r20, 0xFA	; 250
    2292:	54 e4       	ldi	r21, 0x44	; 68
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8d 8b       	std	Y+21, r24	; 0x15
    229e:	9e 8b       	std	Y+22, r25	; 0x16
    22a0:	af 8b       	std	Y+23, r26	; 0x17
    22a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 8b       	std	Y+20, r25	; 0x14
    22c2:	8b 8b       	std	Y+19, r24	; 0x13
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22c6:	6d 89       	ldd	r22, Y+21	; 0x15
    22c8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ca:	8f 89       	ldd	r24, Y+23	; 0x17
    22cc:	98 8d       	ldd	r25, Y+24	; 0x18
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	69 8d       	ldd	r22, Y+25	; 0x19
    22e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 8b       	std	Y+20, r25	; 0x14
    2304:	8b 8b       	std	Y+19, r24	; 0x13
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <LCD_sendCommand+0x7be>
    2308:	88 ec       	ldi	r24, 0xC8	; 200
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	89 8b       	std	Y+17, r24	; 0x11
    2310:	89 89       	ldd	r24, Y+17	; 0x11
    2312:	9a 89       	ldd	r25, Y+18	; 0x12
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_sendCommand+0x7ac>
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	9c 89       	ldd	r25, Y+20	; 0x14
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <LCD_sendCommand+0x7a0>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9c 8b       	std	Y+20, r25	; 0x14
    2342:	8b 8b       	std	Y+19, r24	; 0x13
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	98 8b       	std	Y+16, r25	; 0x10
    234a:	8f 87       	std	Y+15, r24	; 0x0f
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	98 89       	ldd	r25, Y+16	; 0x10
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_sendCommand+0x7e8>
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	62 e0       	ldi	r22, 0x02	; 2
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e8       	ldi	r26, 0x80	; 128
    2368:	bf e3       	ldi	r27, 0x3F	; 63
    236a:	8b 87       	std	Y+11, r24	; 0x0b
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	ad 87       	std	Y+13, r26	; 0x0d
    2370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a ef       	ldi	r20, 0xFA	; 250
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <LCD_sendCommand+0x8ac>
    23f6:	88 ec       	ldi	r24, 0xC8	; 200
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_sendCommand+0x89a>
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <LCD_sendCommand+0x88e>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_sendCommand+0x8d6>
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2446:	cd 59       	subi	r28, 0x9D	; 157
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	c3 56       	subi	r28, 0x63	; 99
    246c:	d0 40       	sbci	r29, 0x00	; 0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	fe 01       	movw	r30, r28
    247a:	ed 59       	subi	r30, 0x9D	; 157
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    248a:	fe 01       	movw	r30, r28
    248c:	e1 5a       	subi	r30, 0xA1	; 161
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	8e 01       	movw	r16, r28
    24a2:	05 5a       	subi	r16, 0xA5	; 165
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	e1 5a       	subi	r30, 0xA1	; 161
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a ef       	ldi	r20, 0xFA	; 250
    24ba:	54 e4       	ldi	r21, 0x44	; 68
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	f8 01       	movw	r30, r16
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e5 5a       	subi	r30, 0xA5	; 165
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	44 f4       	brge	.+16     	; 0x24fc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24ec:	fe 01       	movw	r30, r28
    24ee:	e7 5a       	subi	r30, 0xA7	; 167
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	64 c0       	rjmp	.+200    	; 0x25c4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e5 5a       	subi	r30, 0xA5	; 165
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	0c f0       	brlt	.+2      	; 0x251c <LCD_displayCharacter+0xbe>
    251a:	43 c0       	rjmp	.+134    	; 0x25a2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251c:	fe 01       	movw	r30, r28
    251e:	e1 5a       	subi	r30, 0xA1	; 161
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8e 01       	movw	r16, r28
    253c:	07 5a       	subi	r16, 0xA7	; 167
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	f8 01       	movw	r30, r16
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	1f c0       	rjmp	.+62     	; 0x2592 <LCD_displayCharacter+0x134>
    2554:	fe 01       	movw	r30, r28
    2556:	e9 5a       	subi	r30, 0xA9	; 169
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	88 ec       	ldi	r24, 0xC8	; 200
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	fe 01       	movw	r30, r28
    2564:	e9 5a       	subi	r30, 0xA9	; 169
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_displayCharacter+0x10e>
    2570:	fe 01       	movw	r30, r28
    2572:	e9 5a       	subi	r30, 0xA9	; 169
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	de 01       	movw	r26, r28
    257c:	a7 5a       	subi	r26, 0xA7	; 167
    257e:	bf 4f       	sbci	r27, 0xFF	; 255
    2580:	fe 01       	movw	r30, r28
    2582:	e7 5a       	subi	r30, 0xA7	; 167
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	11 96       	adiw	r26, 0x01	; 1
    258e:	9c 93       	st	X, r25
    2590:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	fe 01       	movw	r30, r28
    2594:	e7 5a       	subi	r30, 0xA7	; 167
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	d1 f6       	brne	.-76     	; 0x2554 <LCD_displayCharacter+0xf6>
    25a0:	27 c0       	rjmp	.+78     	; 0x25f0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	8e 01       	movw	r16, r28
    25a4:	07 5a       	subi	r16, 0xA7	; 167
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 5a       	subi	r30, 0xA5	; 165
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	de 01       	movw	r26, r28
    25c6:	ab 5a       	subi	r26, 0xAB	; 171
    25c8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	e7 5a       	subi	r30, 0xA7	; 167
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	8d 93       	st	X+, r24
    25d6:	9c 93       	st	X, r25
    25d8:	fe 01       	movw	r30, r28
    25da:	eb 5a       	subi	r30, 0xAB	; 171
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_displayCharacter+0x184>
    25e6:	fe 01       	movw	r30, r28
    25e8:	eb 5a       	subi	r30, 0xAB	; 171
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    25fa:	fe 01       	movw	r30, r28
    25fc:	ef 5a       	subi	r30, 0xAF	; 175
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	80 83       	st	Z, r24
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	a2 83       	std	Z+2, r26	; 0x02
    260e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	8e 01       	movw	r16, r28
    2612:	03 5b       	subi	r16, 0xB3	; 179
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	fe 01       	movw	r30, r28
    2618:	ef 5a       	subi	r30, 0xAF	; 175
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a ef       	ldi	r20, 0xFA	; 250
    262a:	54 e4       	ldi	r21, 0x44	; 68
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	f8 01       	movw	r30, r16
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    263e:	fe 01       	movw	r30, r28
    2640:	e3 5b       	subi	r30, 0xB3	; 179
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	44 f4       	brge	.+16     	; 0x266c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    265c:	fe 01       	movw	r30, r28
    265e:	e5 5b       	subi	r30, 0xB5	; 181
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
    266a:	64 c0       	rjmp	.+200    	; 0x2734 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    266c:	fe 01       	movw	r30, r28
    266e:	e3 5b       	subi	r30, 0xB3	; 179
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	0c f0       	brlt	.+2      	; 0x268c <LCD_displayCharacter+0x22e>
    268a:	43 c0       	rjmp	.+134    	; 0x2712 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	fe 01       	movw	r30, r28
    268e:	ef 5a       	subi	r30, 0xAF	; 175
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8e 01       	movw	r16, r28
    26ac:	05 5b       	subi	r16, 0xB5	; 181
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	1f c0       	rjmp	.+62     	; 0x2702 <LCD_displayCharacter+0x2a4>
    26c4:	fe 01       	movw	r30, r28
    26c6:	e7 5b       	subi	r30, 0xB7	; 183
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	88 ec       	ldi	r24, 0xC8	; 200
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	fe 01       	movw	r30, r28
    26d4:	e7 5b       	subi	r30, 0xB7	; 183
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_displayCharacter+0x27e>
    26e0:	fe 01       	movw	r30, r28
    26e2:	e7 5b       	subi	r30, 0xB7	; 183
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	de 01       	movw	r26, r28
    26ec:	a5 5b       	subi	r26, 0xB5	; 181
    26ee:	bf 4f       	sbci	r27, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	e5 5b       	subi	r30, 0xB5	; 181
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	11 96       	adiw	r26, 0x01	; 1
    26fe:	9c 93       	st	X, r25
    2700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	fe 01       	movw	r30, r28
    2704:	e5 5b       	subi	r30, 0xB5	; 181
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	d1 f6       	brne	.-76     	; 0x26c4 <LCD_displayCharacter+0x266>
    2710:	27 c0       	rjmp	.+78     	; 0x2760 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	8e 01       	movw	r16, r28
    2714:	05 5b       	subi	r16, 0xB5	; 181
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	e3 5b       	subi	r30, 0xB3	; 179
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	f8 01       	movw	r30, r16
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	de 01       	movw	r26, r28
    2736:	a9 5b       	subi	r26, 0xB9	; 185
    2738:	bf 4f       	sbci	r27, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	e5 5b       	subi	r30, 0xB5	; 181
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	8d 93       	st	X+, r24
    2746:	9c 93       	st	X, r25
    2748:	fe 01       	movw	r30, r28
    274a:	e9 5b       	subi	r30, 0xB9	; 185
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_displayCharacter+0x2f4>
    2756:	fe 01       	movw	r30, r28
    2758:	e9 5b       	subi	r30, 0xB9	; 185
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2760:	fe 01       	movw	r30, r28
    2762:	ed 59       	subi	r30, 0x9D	; 157
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	80 71       	andi	r24, 0x10	; 16
    276e:	90 70       	andi	r25, 0x00	; 0
    2770:	95 95       	asr	r25
    2772:	87 95       	ror	r24
    2774:	95 95       	asr	r25
    2776:	87 95       	ror	r24
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	98 2f       	mov	r25, r24
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	63 e0       	ldi	r22, 0x03	; 3
    2786:	49 2f       	mov	r20, r25
    2788:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    278c:	fe 01       	movw	r30, r28
    278e:	ed 59       	subi	r30, 0x9D	; 157
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	80 72       	andi	r24, 0x20	; 32
    279a:	90 70       	andi	r25, 0x00	; 0
    279c:	95 95       	asr	r25
    279e:	87 95       	ror	r24
    27a0:	95 95       	asr	r25
    27a2:	87 95       	ror	r24
    27a4:	95 95       	asr	r25
    27a6:	87 95       	ror	r24
    27a8:	95 95       	asr	r25
    27aa:	87 95       	ror	r24
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	98 2f       	mov	r25, r24
    27b2:	82 e0       	ldi	r24, 0x02	; 2
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	49 2f       	mov	r20, r25
    27b8:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 59       	subi	r30, 0x9D	; 157
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	80 74       	andi	r24, 0x40	; 64
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	08 2e       	mov	r0, r24
    27ce:	89 2f       	mov	r24, r25
    27d0:	00 0c       	add	r0, r0
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 0b       	sbc	r25, r25
    27d6:	00 0c       	add	r0, r0
    27d8:	88 1f       	adc	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	98 2f       	mov	r25, r24
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	65 e0       	ldi	r22, 0x05	; 5
    27e2:	49 2f       	mov	r20, r25
    27e4:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    27e8:	fe 01       	movw	r30, r28
    27ea:	ed 59       	subi	r30, 0x9D	; 157
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	98 2f       	mov	r25, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	99 27       	eor	r25, r25
    27f6:	99 1f       	adc	r25, r25
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	49 2f       	mov	r20, r25
    27fe:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2802:	fe 01       	movw	r30, r28
    2804:	ed 5b       	subi	r30, 0xBD	; 189
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e8       	ldi	r26, 0x80	; 128
    280e:	bf e3       	ldi	r27, 0x3F	; 63
    2810:	80 83       	st	Z, r24
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	a2 83       	std	Z+2, r26	; 0x02
    2816:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	8e 01       	movw	r16, r28
    281a:	01 5c       	subi	r16, 0xC1	; 193
    281c:	1f 4f       	sbci	r17, 0xFF	; 255
    281e:	fe 01       	movw	r30, r28
    2820:	ed 5b       	subi	r30, 0xBD	; 189
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	80 83       	st	Z, r24
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	a2 83       	std	Z+2, r26	; 0x02
    2844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2846:	fe 01       	movw	r30, r28
    2848:	ff 96       	adiw	r30, 0x3f	; 63
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9e af       	std	Y+62, r25	; 0x3e
    2868:	8d af       	std	Y+61, r24	; 0x3d
    286a:	46 c0       	rjmp	.+140    	; 0x28f8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    286c:	fe 01       	movw	r30, r28
    286e:	ff 96       	adiw	r30, 0x3f	; 63
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	64 f5       	brge	.+88     	; 0x28e0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	fe 01       	movw	r30, r28
    288a:	ed 5b       	subi	r30, 0xBD	; 189
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9e af       	std	Y+62, r25	; 0x3e
    28b4:	8d af       	std	Y+61, r24	; 0x3d
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <LCD_displayCharacter+0x478>
    28b8:	88 ec       	ldi	r24, 0xC8	; 200
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9c af       	std	Y+60, r25	; 0x3c
    28be:	8b af       	std	Y+59, r24	; 0x3b
    28c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    28c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_displayCharacter+0x466>
    28c8:	9c af       	std	Y+60, r25	; 0x3c
    28ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	9e af       	std	Y+62, r25	; 0x3e
    28d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <LCD_displayCharacter+0x45a>
    28de:	16 c0       	rjmp	.+44     	; 0x290c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	fe 01       	movw	r30, r28
    28e2:	ff 96       	adiw	r30, 0x3f	; 63
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e af       	std	Y+62, r25	; 0x3e
    28f6:	8d af       	std	Y+61, r24	; 0x3d
    28f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    28fc:	9a af       	std	Y+58, r25	; 0x3a
    28fe:	89 af       	std	Y+57, r24	; 0x39
    2900:	89 ad       	ldd	r24, Y+57	; 0x39
    2902:	9a ad       	ldd	r25, Y+58	; 0x3a
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_displayCharacter+0x4a6>
    2908:	9a af       	std	Y+58, r25	; 0x3a
    290a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e8       	ldi	r26, 0x80	; 128
    291c:	bf e3       	ldi	r27, 0x3F	; 63
    291e:	8d ab       	std	Y+53, r24	; 0x35
    2920:	9e ab       	std	Y+54, r25	; 0x36
    2922:	af ab       	std	Y+55, r26	; 0x37
    2924:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	6d a9       	ldd	r22, Y+53	; 0x35
    2928:	7e a9       	ldd	r23, Y+54	; 0x36
    292a:	8f a9       	ldd	r24, Y+55	; 0x37
    292c:	98 ad       	ldd	r25, Y+56	; 0x38
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a ef       	ldi	r20, 0xFA	; 250
    2934:	54 e4       	ldi	r21, 0x44	; 68
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	89 ab       	std	Y+49, r24	; 0x31
    2940:	9a ab       	std	Y+50, r25	; 0x32
    2942:	ab ab       	std	Y+51, r26	; 0x33
    2944:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2946:	69 a9       	ldd	r22, Y+49	; 0x31
    2948:	7a a9       	ldd	r23, Y+50	; 0x32
    294a:	8b a9       	ldd	r24, Y+51	; 0x33
    294c:	9c a9       	ldd	r25, Y+52	; 0x34
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	2c f4       	brge	.+10     	; 0x2968 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	98 ab       	std	Y+48, r25	; 0x30
    2964:	8f a7       	std	Y+47, r24	; 0x2f
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	4c f5       	brge	.+82     	; 0x29d2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2980:	6d a9       	ldd	r22, Y+53	; 0x35
    2982:	7e a9       	ldd	r23, Y+54	; 0x36
    2984:	8f a9       	ldd	r24, Y+55	; 0x37
    2986:	98 ad       	ldd	r25, Y+56	; 0x38
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	98 ab       	std	Y+48, r25	; 0x30
    29a6:	8f a7       	std	Y+47, r24	; 0x2f
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <LCD_displayCharacter+0x56a>
    29aa:	88 ec       	ldi	r24, 0xC8	; 200
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9e a7       	std	Y+46, r25	; 0x2e
    29b0:	8d a7       	std	Y+45, r24	; 0x2d
    29b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <LCD_displayCharacter+0x558>
    29ba:	9e a7       	std	Y+46, r25	; 0x2e
    29bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c0:	98 a9       	ldd	r25, Y+48	; 0x30
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	98 ab       	std	Y+48, r25	; 0x30
    29c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ca:	98 a9       	ldd	r25, Y+48	; 0x30
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	69 f7       	brne	.-38     	; 0x29aa <LCD_displayCharacter+0x54c>
    29d0:	14 c0       	rjmp	.+40     	; 0x29fa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	69 a9       	ldd	r22, Y+49	; 0x31
    29d4:	7a a9       	ldd	r23, Y+50	; 0x32
    29d6:	8b a9       	ldd	r24, Y+51	; 0x33
    29d8:	9c a9       	ldd	r25, Y+52	; 0x34
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	98 ab       	std	Y+48, r25	; 0x30
    29e4:	8f a7       	std	Y+47, r24	; 0x2f
    29e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e8:	98 a9       	ldd	r25, Y+48	; 0x30
    29ea:	9c a7       	std	Y+44, r25	; 0x2c
    29ec:	8b a7       	std	Y+43, r24	; 0x2b
    29ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_displayCharacter+0x594>
    29f6:	9c a7       	std	Y+44, r25	; 0x2c
    29f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	62 e0       	ldi	r22, 0x02	; 2
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a0 e8       	ldi	r26, 0x80	; 128
    2a0a:	bf e3       	ldi	r27, 0x3F	; 63
    2a0c:	8f a3       	std	Y+39, r24	; 0x27
    2a0e:	98 a7       	std	Y+40, r25	; 0x28
    2a10:	a9 a7       	std	Y+41, r26	; 0x29
    2a12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	6f a1       	ldd	r22, Y+39	; 0x27
    2a16:	78 a5       	ldd	r23, Y+40	; 0x28
    2a18:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a ef       	ldi	r20, 0xFA	; 250
    2a22:	54 e4       	ldi	r21, 0x44	; 68
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	8b a3       	std	Y+35, r24	; 0x23
    2a2e:	9c a3       	std	Y+36, r25	; 0x24
    2a30:	ad a3       	std	Y+37, r26	; 0x25
    2a32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a34:	6b a1       	ldd	r22, Y+35	; 0x23
    2a36:	7c a1       	ldd	r23, Y+36	; 0x24
    2a38:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9a a3       	std	Y+34, r25	; 0x22
    2a52:	89 a3       	std	Y+33, r24	; 0x21
    2a54:	3f c0       	rjmp	.+126    	; 0x2ad4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	4f e7       	ldi	r20, 0x7F	; 127
    2a64:	57 e4       	ldi	r21, 0x47	; 71
    2a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6a:	18 16       	cp	r1, r24
    2a6c:	4c f5       	brge	.+82     	; 0x2ac0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a70:	78 a5       	ldd	r23, Y+40	; 0x28
    2a72:	89 a5       	ldd	r24, Y+41	; 0x29
    2a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a a3       	std	Y+34, r25	; 0x22
    2a94:	89 a3       	std	Y+33, r24	; 0x21
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <LCD_displayCharacter+0x658>
    2a98:	88 ec       	ldi	r24, 0xC8	; 200
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	98 a3       	std	Y+32, r25	; 0x20
    2a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aa2:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <LCD_displayCharacter+0x646>
    2aa8:	98 a3       	std	Y+32, r25	; 0x20
    2aaa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	89 a1       	ldd	r24, Y+33	; 0x21
    2aae:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	9a a3       	std	Y+34, r25	; 0x22
    2ab4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	69 f7       	brne	.-38     	; 0x2a98 <LCD_displayCharacter+0x63a>
    2abe:	14 c0       	rjmp	.+40     	; 0x2ae8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9a a3       	std	Y+34, r25	; 0x22
    2ad2:	89 a3       	std	Y+33, r24	; 0x21
    2ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    2ada:	8d 8f       	std	Y+29, r24	; 0x1d
    2adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <LCD_displayCharacter+0x682>
    2ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 59       	subi	r30, 0x9D	; 157
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	98 2f       	mov	r25, r24
    2af2:	91 70       	andi	r25, 0x01	; 1
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	63 e0       	ldi	r22, 0x03	; 3
    2af8:	49 2f       	mov	r20, r25
    2afa:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2afe:	fe 01       	movw	r30, r28
    2b00:	ed 59       	subi	r30, 0x9D	; 157
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	82 70       	andi	r24, 0x02	; 2
    2b0c:	90 70       	andi	r25, 0x00	; 0
    2b0e:	95 95       	asr	r25
    2b10:	87 95       	ror	r24
    2b12:	98 2f       	mov	r25, r24
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	64 e0       	ldi	r22, 0x04	; 4
    2b18:	49 2f       	mov	r20, r25
    2b1a:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ed 59       	subi	r30, 0x9D	; 157
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	88 2f       	mov	r24, r24
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	84 70       	andi	r24, 0x04	; 4
    2b2c:	90 70       	andi	r25, 0x00	; 0
    2b2e:	95 95       	asr	r25
    2b30:	87 95       	ror	r24
    2b32:	95 95       	asr	r25
    2b34:	87 95       	ror	r24
    2b36:	98 2f       	mov	r25, r24
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	65 e0       	ldi	r22, 0x05	; 5
    2b3c:	49 2f       	mov	r20, r25
    2b3e:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2b42:	fe 01       	movw	r30, r28
    2b44:	ed 59       	subi	r30, 0x9D	; 157
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	88 70       	andi	r24, 0x08	; 8
    2b50:	90 70       	andi	r25, 0x00	; 0
    2b52:	95 95       	asr	r25
    2b54:	87 95       	ror	r24
    2b56:	95 95       	asr	r25
    2b58:	87 95       	ror	r24
    2b5a:	95 95       	asr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	98 2f       	mov	r25, r24
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	66 e0       	ldi	r22, 0x06	; 6
    2b64:	49 2f       	mov	r20, r25
    2b66:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e8       	ldi	r26, 0x80	; 128
    2b70:	bf e3       	ldi	r27, 0x3F	; 63
    2b72:	89 8f       	std	Y+25, r24	; 0x19
    2b74:	9a 8f       	std	Y+26, r25	; 0x1a
    2b76:	ab 8f       	std	Y+27, r26	; 0x1b
    2b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a ef       	ldi	r20, 0xFA	; 250
    2b88:	54 e4       	ldi	r21, 0x44	; 68
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8d 8b       	std	Y+21, r24	; 0x15
    2b94:	9e 8b       	std	Y+22, r25	; 0x16
    2b96:	af 8b       	std	Y+23, r26	; 0x17
    2b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	8b 8b       	std	Y+19, r24	; 0x13
    2bba:	3f c0       	rjmp	.+126    	; 0x2c3a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd0:	18 16       	cp	r1, r24
    2bd2:	4c f5       	brge	.+82     	; 0x2c26 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <LCD_displayCharacter+0x7be>
    2bfe:	88 ec       	ldi	r24, 0xC8	; 200
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9a 8b       	std	Y+18, r25	; 0x12
    2c04:	89 8b       	std	Y+17, r24	; 0x11
    2c06:	89 89       	ldd	r24, Y+17	; 0x11
    2c08:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_displayCharacter+0x7ac>
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	69 f7       	brne	.-38     	; 0x2bfe <LCD_displayCharacter+0x7a0>
    2c24:	14 c0       	rjmp	.+40     	; 0x2c4e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	6d 89       	ldd	r22, Y+21	; 0x15
    2c28:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9c 8b       	std	Y+20, r25	; 0x14
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3e:	98 8b       	std	Y+16, r25	; 0x10
    2c40:	8f 87       	std	Y+15, r24	; 0x0f
    2c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c44:	98 89       	ldd	r25, Y+16	; 0x10
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <LCD_displayCharacter+0x7e8>
    2c4a:	98 8b       	std	Y+16, r25	; 0x10
    2c4c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	62 e0       	ldi	r22, 0x02	; 2
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	0e 94 b7 09 	call	0x136e	; 0x136e <GPIO_writePin>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	a0 e8       	ldi	r26, 0x80	; 128
    2c5e:	bf e3       	ldi	r27, 0x3F	; 63
    2c60:	8b 87       	std	Y+11, r24	; 0x0b
    2c62:	9c 87       	std	Y+12, r25	; 0x0c
    2c64:	ad 87       	std	Y+13, r26	; 0x0d
    2c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a ef       	ldi	r20, 0xFA	; 250
    2c76:	54 e4       	ldi	r21, 0x44	; 68
    2c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8f 83       	std	Y+7, r24	; 0x07
    2c82:	98 87       	std	Y+8, r25	; 0x08
    2c84:	a9 87       	std	Y+9, r26	; 0x09
    2c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e8       	ldi	r20, 0x80	; 128
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c9c:	88 23       	and	r24, r24
    2c9e:	2c f4       	brge	.+10     	; 0x2caa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	3f c0       	rjmp	.+126    	; 0x2d28 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2caa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cac:	78 85       	ldd	r23, Y+8	; 0x08
    2cae:	89 85       	ldd	r24, Y+9	; 0x09
    2cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	4f e7       	ldi	r20, 0x7F	; 127
    2cb8:	57 e4       	ldi	r21, 0x47	; 71
    2cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cbe:	18 16       	cp	r1, r24
    2cc0:	4c f5       	brge	.+82     	; 0x2d14 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <LCD_displayCharacter+0x8ac>
    2cec:	88 ec       	ldi	r24, 0xC8	; 200
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_displayCharacter+0x89a>
    2cfc:	9c 83       	std	Y+4, r25	; 0x04
    2cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	69 f7       	brne	.-38     	; 0x2cec <LCD_displayCharacter+0x88e>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d14:	6f 81       	ldd	r22, Y+7	; 0x07
    2d16:	78 85       	ldd	r23, Y+8	; 0x08
    2d18:	89 85       	ldd	r24, Y+9	; 0x09
    2d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <LCD_displayCharacter+0x8d6>
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d3c:	cd 59       	subi	r28, 0x9D	; 157
    2d3e:	df 4f       	sbci	r29, 0xFF	; 255
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

00002d54 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <LCD_displayString+0x6>
    2d5a:	0f 92       	push	r0
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	9b 83       	std	Y+3, r25	; 0x03
    2d62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d64:	19 82       	std	Y+1, r1	; 0x01
    2d66:	0e c0       	rjmp	.+28     	; 0x2d84 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	fc 01       	movw	r30, r24
    2d74:	e2 0f       	add	r30, r18
    2d76:	f3 1f       	adc	r31, r19
    2d78:	80 81       	ld	r24, Z
    2d7a:	0e 94 2f 12 	call	0x245e	; 0x245e <LCD_displayCharacter>
		i++;
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	fc 01       	movw	r30, r24
    2d90:	e2 0f       	add	r30, r18
    2d92:	f3 1f       	adc	r31, r19
    2d94:	80 81       	ld	r24, Z
    2d96:	88 23       	and	r24, r24
    2d98:	39 f7       	brne	.-50     	; 0x2d68 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <LCD_moveCursor+0x6>
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <LCD_moveCursor+0x8>
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	3d 83       	std	Y+5, r19	; 0x05
    2dc0:	2c 83       	std	Y+4, r18	; 0x04
    2dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	91 05       	cpc	r25, r1
    2dca:	c1 f0       	breq	.+48     	; 0x2dfc <LCD_moveCursor+0x56>
    2dcc:	2c 81       	ldd	r18, Y+4	; 0x04
    2dce:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd0:	22 30       	cpi	r18, 0x02	; 2
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <LCD_moveCursor+0x3a>
    2dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <LCD_moveCursor+0x50>
    2dde:	19 c0       	rjmp	.+50     	; 0x2e12 <LCD_moveCursor+0x6c>
    2de0:	2c 81       	ldd	r18, Y+4	; 0x04
    2de2:	3d 81       	ldd	r19, Y+5	; 0x05
    2de4:	22 30       	cpi	r18, 0x02	; 2
    2de6:	31 05       	cpc	r19, r1
    2de8:	69 f0       	breq	.+26     	; 0x2e04 <LCD_moveCursor+0x5e>
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	9d 81       	ldd	r25, Y+5	; 0x05
    2dee:	83 30       	cpi	r24, 0x03	; 3
    2df0:	91 05       	cpc	r25, r1
    2df2:	61 f0       	breq	.+24     	; 0x2e0c <LCD_moveCursor+0x66>
    2df4:	0e c0       	rjmp	.+28     	; 0x2e12 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	0b c0       	rjmp	.+22     	; 0x2e12 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	80 5c       	subi	r24, 0xC0	; 192
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	07 c0       	rjmp	.+14     	; 0x2e12 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	80 5f       	subi	r24, 0xF0	; 240
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	03 c0       	rjmp	.+6      	; 0x2e12 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	80 5b       	subi	r24, 0xB0	; 176
    2e10:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	80 68       	ori	r24, 0x80	; 128
    2e16:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
}
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <LCD_displayStringRowColumn+0x6>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <LCD_displayStringRowColumn+0x8>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	6a 83       	std	Y+2, r22	; 0x02
    2e3a:	5c 83       	std	Y+4, r21	; 0x04
    2e3c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	6a 81       	ldd	r22, Y+2	; 0x02
    2e42:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
}
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	62 97       	sbiw	r28, 0x12	; 18
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	9a 8b       	std	Y+18, r25	; 0x12
    2e72:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e74:	89 89       	ldd	r24, Y+17	; 0x11
    2e76:	9a 89       	ldd	r25, Y+18	; 0x12
    2e78:	9e 01       	movw	r18, r28
    2e7a:	2f 5f       	subi	r18, 0xFF	; 255
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7e:	b9 01       	movw	r22, r18
    2e80:	4a e0       	ldi	r20, 0x0A	; 10
    2e82:	50 e0       	ldi	r21, 0x00	; 0
    2e84:	0e 94 3e 1a 	call	0x347c	; 0x347c <itoa>
   LCD_displayString(buff); /* Display the string */
    2e88:	ce 01       	movw	r24, r28
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
}
    2e90:	62 96       	adiw	r28, 0x12	; 18
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
}
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <main>:
 *  Created on: Nov 3, 2022
 *      Author: Anwar
 */
#include "HMI_ECU.h"

int main(int argc, char **argv) {
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	62 97       	sbiw	r28, 0x12	; 18
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	98 8b       	std	Y+16, r25	; 0x10
    2ecc:	8f 87       	std	Y+15, r24	; 0x0f
    2ece:	7a 8b       	std	Y+18, r23	; 0x12
    2ed0:	69 8b       	std	Y+17, r22	; 0x11
	SREG |= (1<<7);
    2ed2:	af e5       	ldi	r26, 0x5F	; 95
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	ef e5       	ldi	r30, 0x5F	; 95
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	80 68       	ori	r24, 0x80	; 128
    2ede:	8c 93       	st	X, r24
	LCD_init();
    2ee0:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_init>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a8 ec       	ldi	r26, 0xC8	; 200
    2eea:	b2 e4       	ldi	r27, 0x42	; 66
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	9c 87       	std	Y+12, r25	; 0x0c
    2ef0:	ad 87       	std	Y+13, r26	; 0x0d
    2ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8f 83       	std	Y+7, r24	; 0x07
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	a9 87       	std	Y+9, r26	; 0x09
    2f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <main+0x80>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <main+0xfe>
	else if (__tmp > 65535)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <main+0xe0>
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <main+0xce>
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <main+0xc2>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <main+0x10a>
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	HMI_creatPass();
    2fc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_creatPass>
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
}
    2fd0:	62 96       	adiw	r28, 0x12	; 18
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <__vector_9>:
#include "lcd.h"

static volatile void (*g_callBackPtr)() = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	2f 93       	push	r18
    2fee:	3f 93       	push	r19
    2ff0:	4f 93       	push	r20
    2ff2:	5f 93       	push	r21
    2ff4:	6f 93       	push	r22
    2ff6:	7f 93       	push	r23
    2ff8:	8f 93       	push	r24
    2ffa:	9f 93       	push	r25
    2ffc:	af 93       	push	r26
    2ffe:	bf 93       	push	r27
    3000:	ef 93       	push	r30
    3002:	ff 93       	push	r31
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    300c:	80 91 f1 00 	lds	r24, 0x00F1
    3010:	90 91 f2 00 	lds	r25, 0x00F2
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	29 f0       	breq	.+10     	; 0x3022 <__vector_9+0x40>
		{
			/* Setting the callback function */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3018:	e0 91 f1 00 	lds	r30, 0x00F1
    301c:	f0 91 f2 00 	lds	r31, 0x00F2
    3020:	09 95       	icall
		}
}
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	ff 91       	pop	r31
    3028:	ef 91       	pop	r30
    302a:	bf 91       	pop	r27
    302c:	af 91       	pop	r26
    302e:	9f 91       	pop	r25
    3030:	8f 91       	pop	r24
    3032:	7f 91       	pop	r23
    3034:	6f 91       	pop	r22
    3036:	5f 91       	pop	r21
    3038:	4f 91       	pop	r20
    303a:	3f 91       	pop	r19
    303c:	2f 91       	pop	r18
    303e:	0f 90       	pop	r0
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	0f 90       	pop	r0
    3044:	1f 90       	pop	r1
    3046:	18 95       	reti

00003048 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3048:	1f 92       	push	r1
    304a:	0f 92       	push	r0
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	0f 92       	push	r0
    3050:	11 24       	eor	r1, r1
    3052:	2f 93       	push	r18
    3054:	3f 93       	push	r19
    3056:	4f 93       	push	r20
    3058:	5f 93       	push	r21
    305a:	6f 93       	push	r22
    305c:	7f 93       	push	r23
    305e:	8f 93       	push	r24
    3060:	9f 93       	push	r25
    3062:	af 93       	push	r26
    3064:	bf 93       	push	r27
    3066:	ef 93       	push	r30
    3068:	ff 93       	push	r31
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3072:	80 91 f1 00 	lds	r24, 0x00F1
    3076:	90 91 f2 00 	lds	r25, 0x00F2
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	29 f0       	breq	.+10     	; 0x3088 <__vector_7+0x40>
		{
			/* Setting the callback function */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    307e:	e0 91 f1 00 	lds	r30, 0x00F1
    3082:	f0 91 f2 00 	lds	r31, 0x00F2
    3086:	09 95       	icall
		}
}
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	ff 91       	pop	r31
    308e:	ef 91       	pop	r30
    3090:	bf 91       	pop	r27
    3092:	af 91       	pop	r26
    3094:	9f 91       	pop	r25
    3096:	8f 91       	pop	r24
    3098:	7f 91       	pop	r23
    309a:	6f 91       	pop	r22
    309c:	5f 91       	pop	r21
    309e:	4f 91       	pop	r20
    30a0:	3f 91       	pop	r19
    30a2:	2f 91       	pop	r18
    30a4:	0f 90       	pop	r0
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	0f 90       	pop	r0
    30aa:	1f 90       	pop	r1
    30ac:	18 95       	reti

000030ae <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <Timer1_init+0x6>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to compare value in config structure */
    30bc:	ac e4       	ldi	r26, 0x4C	; 76
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	e9 81       	ldd	r30, Y+1	; 0x01
    30c2:	fa 81       	ldd	r31, Y+2	; 0x02
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	11 96       	adiw	r26, 0x01	; 1
    30ca:	9c 93       	st	X, r25
    30cc:	8e 93       	st	-X, r24

	OCR1A = Config_Ptr->compare_value;    /* Set the Compare value to 125 ((125/500) * 100 = 25%) */
    30ce:	aa e4       	ldi	r26, 0x4A	; 74
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e9 81       	ldd	r30, Y+1	; 0x01
    30d4:	fa 81       	ldd	r31, Y+2	; 0x02
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	93 81       	ldd	r25, Z+3	; 0x03
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	9c 93       	st	X, r25
    30de:	8e 93       	st	-X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A |= (1<<FOC1A);
    30e0:	af e4       	ldi	r26, 0x4F	; 79
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	ef e4       	ldi	r30, 0x4F	; 79
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	88 60       	ori	r24, 0x08	; 8
    30ec:	8c 93       	st	X, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/8 CS10=0 CS11=1 CS12=0
	 */
	TCCR1B = (TCCR1B & 0xF8) | Config_Ptr->prescaler;
    30ee:	ae e4       	ldi	r26, 0x4E	; 78
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	ee e4       	ldi	r30, 0x4E	; 78
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	98 2f       	mov	r25, r24
    30fa:	98 7f       	andi	r25, 0xF8	; 248
    30fc:	e9 81       	ldd	r30, Y+1	; 0x01
    30fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3100:	84 81       	ldd	r24, Z+4	; 0x04
    3102:	89 2b       	or	r24, r25
    3104:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | (Config_Ptr->mode << 1);
    3106:	ae e4       	ldi	r26, 0x4E	; 78
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	ee e4       	ldi	r30, 0x4E	; 78
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	28 2f       	mov	r18, r24
    3112:	27 7f       	andi	r18, 0xF7	; 247
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	85 81       	ldd	r24, Z+5	; 0x05
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	82 2b       	or	r24, r18
    3124:	8c 93       	st	X, r24

	TIMSK = (1<<OCIE1A); /*Enable Timer1 Compare A Interrupt */
    3126:	e9 e5       	ldi	r30, 0x59	; 89
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 e1       	ldi	r24, 0x10	; 16
    312c:	80 83       	st	Z, r24
}
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <Timer1_deInit>:

void Timer1_deInit(void){
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Disable Timer1 intrrupt
	 */
	TIMSK &= ~(1<<OCIE1A);
    3140:	a9 e5       	ldi	r26, 0x59	; 89
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e9 e5       	ldi	r30, 0x59	; 89
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	8f 7e       	andi	r24, 0xEF	; 239
    314c:	8c 93       	st	X, r24
}
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <Timer1_setCallBack+0x6>
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	9a 83       	std	Y+2, r25	; 0x02
    3160:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	90 93 f2 00 	sts	0x00F2, r25
    316a:	80 93 f1 00 	sts	0x00F1, r24
}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	00 d0       	rcall	.+0      	; 0x317e <UART_init+0x6>
    317e:	00 d0       	rcall	.+0      	; 0x3180 <UART_init+0x8>
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3188:	1a 82       	std	Y+2, r1	; 0x02
    318a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    318c:	eb e2       	ldi	r30, 0x2B	; 43
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	82 e0       	ldi	r24, 0x02	; 2
    3192:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3194:	ea e2       	ldi	r30, 0x2A	; 42
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	88 e1       	ldi	r24, 0x18	; 24
    319a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    319c:	e0 e4       	ldi	r30, 0x40	; 64
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 e8       	ldi	r24, 0x80	; 128
    31a2:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << UPM0);
    31a4:	a0 e4       	ldi	r26, 0x40	; 64
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e0 e4       	ldi	r30, 0x40	; 64
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	28 2f       	mov	r18, r24
    31b0:	2f 7c       	andi	r18, 0xCF	; 207
    31b2:	eb 81       	ldd	r30, Y+3	; 0x03
    31b4:	fc 81       	ldd	r31, Y+4	; 0x04
    31b6:	81 81       	ldd	r24, Z+1	; 0x01
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	82 95       	swap	r24
    31be:	92 95       	swap	r25
    31c0:	90 7f       	andi	r25, 0xF0	; 240
    31c2:	98 27       	eor	r25, r24
    31c4:	80 7f       	andi	r24, 0xF0	; 240
    31c6:	98 27       	eor	r25, r24
    31c8:	82 2b       	or	r24, r18
    31ca:	8c 93       	st	X, r24

	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->bit_data) & 0x04) << UCSZ2);
    31cc:	aa e2       	ldi	r26, 0x2A	; 42
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	ea e2       	ldi	r30, 0x2A	; 42
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	28 2f       	mov	r18, r24
    31d8:	2b 7f       	andi	r18, 0xFB	; 251
    31da:	eb 81       	ldd	r30, Y+3	; 0x03
    31dc:	fc 81       	ldd	r31, Y+4	; 0x04
    31de:	80 81       	ld	r24, Z
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	84 70       	andi	r24, 0x04	; 4
    31e6:	90 70       	andi	r25, 0x00	; 0
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	82 2b       	or	r24, r18
    31f2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & 0x03) << UCSZ0);
    31f4:	a0 e4       	ldi	r26, 0x40	; 64
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e0 e4       	ldi	r30, 0x40	; 64
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	28 2f       	mov	r18, r24
    3200:	29 7f       	andi	r18, 0xF9	; 249
    3202:	eb 81       	ldd	r30, Y+3	; 0x03
    3204:	fc 81       	ldd	r31, Y+4	; 0x04
    3206:	80 81       	ld	r24, Z
    3208:	88 2f       	mov	r24, r24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	83 70       	andi	r24, 0x03	; 3
    320e:	90 70       	andi	r25, 0x00	; 0
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	82 2b       	or	r24, r18
    3216:	8c 93       	st	X, r24
	
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << USBS);
    3218:	a0 e4       	ldi	r26, 0x40	; 64
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e0 e4       	ldi	r30, 0x40	; 64
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	28 2f       	mov	r18, r24
    3224:	27 7f       	andi	r18, 0xF7	; 247
    3226:	eb 81       	ldd	r30, Y+3	; 0x03
    3228:	fc 81       	ldd	r31, Y+4	; 0x04
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	88 0f       	add	r24, r24
    323a:	99 1f       	adc	r25, r25
    323c:	82 2b       	or	r24, r18
    323e:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3240:	eb 81       	ldd	r30, Y+3	; 0x03
    3242:	fc 81       	ldd	r31, Y+4	; 0x04
    3244:	83 81       	ldd	r24, Z+3	; 0x03
    3246:	94 81       	ldd	r25, Z+4	; 0x04
    3248:	a5 81       	ldd	r26, Z+5	; 0x05
    324a:	b6 81       	ldd	r27, Z+6	; 0x06
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	aa 1f       	adc	r26, r26
    3252:	bb 1f       	adc	r27, r27
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	aa 1f       	adc	r26, r26
    325a:	bb 1f       	adc	r27, r27
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	aa 1f       	adc	r26, r26
    3262:	bb 1f       	adc	r27, r27
    3264:	9c 01       	movw	r18, r24
    3266:	ad 01       	movw	r20, r26
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	92 e1       	ldi	r25, 0x12	; 18
    326c:	aa e7       	ldi	r26, 0x7A	; 122
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__udivmodsi4>
    3278:	da 01       	movw	r26, r20
    327a:	c9 01       	movw	r24, r18
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3282:	e0 e4       	ldi	r30, 0x40	; 64
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	89 2f       	mov	r24, r25
    328c:	99 27       	eor	r25, r25
    328e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3290:	e9 e2       	ldi	r30, 0x29	; 41
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	80 83       	st	Z, r24
}
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	0f 92       	push	r0
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    32b2:	eb e2       	ldi	r30, 0x2B	; 43
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	80 72       	andi	r24, 0x20	; 32
    32be:	90 70       	andi	r25, 0x00	; 0
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	b9 f3       	breq	.-18     	; 0x32b2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    32c4:	ec e2       	ldi	r30, 0x2C	; 44
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32dc:	eb e2       	ldi	r30, 0x2B	; 43
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	88 23       	and	r24, r24
    32e4:	dc f7       	brge	.-10     	; 0x32dc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    32e6:	ec e2       	ldi	r30, 0x2C	; 44
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
}
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <UART_sendString+0x6>
    32f8:	0f 92       	push	r0
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	9b 83       	std	Y+3, r25	; 0x03
    3300:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3302:	19 82       	std	Y+1, r1	; 0x01
    3304:	0e c0       	rjmp	.+28     	; 0x3322 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	28 2f       	mov	r18, r24
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	fc 01       	movw	r30, r24
    3312:	e2 0f       	add	r30, r18
    3314:	f3 1f       	adc	r31, r19
    3316:	80 81       	ld	r24, Z
    3318:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendByte>
		i++;
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	fc 01       	movw	r30, r24
    332e:	e2 0f       	add	r30, r18
    3330:	f3 1f       	adc	r31, r19
    3332:	80 81       	ld	r24, Z
    3334:	88 23       	and	r24, r24
    3336:	39 f7       	brne	.-50     	; 0x3306 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	00 d0       	rcall	.+0      	; 0x334e <UART_receiveString+0xa>
    334e:	0f 92       	push	r0
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	9b 83       	std	Y+3, r25	; 0x03
    3356:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3358:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	28 2f       	mov	r18, r24
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	9b 81       	ldd	r25, Y+3	; 0x03
    3364:	8c 01       	movw	r16, r24
    3366:	02 0f       	add	r16, r18
    3368:	13 1f       	adc	r17, r19
    336a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
    336e:	f8 01       	movw	r30, r16
    3370:	80 83       	st	Z, r24
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	8f 5f       	subi	r24, 0xFF	; 255
    3378:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	9b 81       	ldd	r25, Y+3	; 0x03
    3384:	8c 01       	movw	r16, r24
    3386:	02 0f       	add	r16, r18
    3388:	13 1f       	adc	r17, r19
    338a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <UART_recieveByte>
    338e:	f8 01       	movw	r30, r16
    3390:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	9b 81       	ldd	r25, Y+3	; 0x03
    339c:	fc 01       	movw	r30, r24
    339e:	e2 0f       	add	r30, r18
    33a0:	f3 1f       	adc	r31, r19
    33a2:	80 81       	ld	r24, Z
    33a4:	83 32       	cpi	r24, 0x23	; 35
    33a6:	31 f7       	brne	.-52     	; 0x3374 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	9b 81       	ldd	r25, Y+3	; 0x03
    33b2:	fc 01       	movw	r30, r24
    33b4:	e2 0f       	add	r30, r18
    33b6:	f3 1f       	adc	r31, r19
    33b8:	10 82       	st	Z, r1
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <__udivmodsi4>:
    33ca:	a1 e2       	ldi	r26, 0x21	; 33
    33cc:	1a 2e       	mov	r1, r26
    33ce:	aa 1b       	sub	r26, r26
    33d0:	bb 1b       	sub	r27, r27
    33d2:	fd 01       	movw	r30, r26
    33d4:	0d c0       	rjmp	.+26     	; 0x33f0 <__udivmodsi4_ep>

000033d6 <__udivmodsi4_loop>:
    33d6:	aa 1f       	adc	r26, r26
    33d8:	bb 1f       	adc	r27, r27
    33da:	ee 1f       	adc	r30, r30
    33dc:	ff 1f       	adc	r31, r31
    33de:	a2 17       	cp	r26, r18
    33e0:	b3 07       	cpc	r27, r19
    33e2:	e4 07       	cpc	r30, r20
    33e4:	f5 07       	cpc	r31, r21
    33e6:	20 f0       	brcs	.+8      	; 0x33f0 <__udivmodsi4_ep>
    33e8:	a2 1b       	sub	r26, r18
    33ea:	b3 0b       	sbc	r27, r19
    33ec:	e4 0b       	sbc	r30, r20
    33ee:	f5 0b       	sbc	r31, r21

000033f0 <__udivmodsi4_ep>:
    33f0:	66 1f       	adc	r22, r22
    33f2:	77 1f       	adc	r23, r23
    33f4:	88 1f       	adc	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	1a 94       	dec	r1
    33fa:	69 f7       	brne	.-38     	; 0x33d6 <__udivmodsi4_loop>
    33fc:	60 95       	com	r22
    33fe:	70 95       	com	r23
    3400:	80 95       	com	r24
    3402:	90 95       	com	r25
    3404:	9b 01       	movw	r18, r22
    3406:	ac 01       	movw	r20, r24
    3408:	bd 01       	movw	r22, r26
    340a:	cf 01       	movw	r24, r30
    340c:	08 95       	ret

0000340e <__prologue_saves__>:
    340e:	2f 92       	push	r2
    3410:	3f 92       	push	r3
    3412:	4f 92       	push	r4
    3414:	5f 92       	push	r5
    3416:	6f 92       	push	r6
    3418:	7f 92       	push	r7
    341a:	8f 92       	push	r8
    341c:	9f 92       	push	r9
    341e:	af 92       	push	r10
    3420:	bf 92       	push	r11
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	ca 1b       	sub	r28, r26
    3438:	db 0b       	sbc	r29, r27
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	09 94       	ijmp

00003446 <__epilogue_restores__>:
    3446:	2a 88       	ldd	r2, Y+18	; 0x12
    3448:	39 88       	ldd	r3, Y+17	; 0x11
    344a:	48 88       	ldd	r4, Y+16	; 0x10
    344c:	5f 84       	ldd	r5, Y+15	; 0x0f
    344e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3450:	7d 84       	ldd	r7, Y+13	; 0x0d
    3452:	8c 84       	ldd	r8, Y+12	; 0x0c
    3454:	9b 84       	ldd	r9, Y+11	; 0x0b
    3456:	aa 84       	ldd	r10, Y+10	; 0x0a
    3458:	b9 84       	ldd	r11, Y+9	; 0x09
    345a:	c8 84       	ldd	r12, Y+8	; 0x08
    345c:	df 80       	ldd	r13, Y+7	; 0x07
    345e:	ee 80       	ldd	r14, Y+6	; 0x06
    3460:	fd 80       	ldd	r15, Y+5	; 0x05
    3462:	0c 81       	ldd	r16, Y+4	; 0x04
    3464:	1b 81       	ldd	r17, Y+3	; 0x03
    3466:	aa 81       	ldd	r26, Y+2	; 0x02
    3468:	b9 81       	ldd	r27, Y+1	; 0x01
    346a:	ce 0f       	add	r28, r30
    346c:	d1 1d       	adc	r29, r1
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    3478:	ed 01       	movw	r28, r26
    347a:	08 95       	ret

0000347c <itoa>:
    347c:	fb 01       	movw	r30, r22
    347e:	9f 01       	movw	r18, r30
    3480:	e8 94       	clt
    3482:	42 30       	cpi	r20, 0x02	; 2
    3484:	c4 f0       	brlt	.+48     	; 0x34b6 <itoa+0x3a>
    3486:	45 32       	cpi	r20, 0x25	; 37
    3488:	b4 f4       	brge	.+44     	; 0x34b6 <itoa+0x3a>
    348a:	4a 30       	cpi	r20, 0x0A	; 10
    348c:	29 f4       	brne	.+10     	; 0x3498 <itoa+0x1c>
    348e:	97 fb       	bst	r25, 7
    3490:	1e f4       	brtc	.+6      	; 0x3498 <itoa+0x1c>
    3492:	90 95       	com	r25
    3494:	81 95       	neg	r24
    3496:	9f 4f       	sbci	r25, 0xFF	; 255
    3498:	64 2f       	mov	r22, r20
    349a:	77 27       	eor	r23, r23
    349c:	0e 94 6f 1a 	call	0x34de	; 0x34de <__udivmodhi4>
    34a0:	80 5d       	subi	r24, 0xD0	; 208
    34a2:	8a 33       	cpi	r24, 0x3A	; 58
    34a4:	0c f0       	brlt	.+2      	; 0x34a8 <itoa+0x2c>
    34a6:	89 5d       	subi	r24, 0xD9	; 217
    34a8:	81 93       	st	Z+, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	a1 f7       	brne	.-24     	; 0x3498 <itoa+0x1c>
    34b0:	16 f4       	brtc	.+4      	; 0x34b6 <itoa+0x3a>
    34b2:	5d e2       	ldi	r21, 0x2D	; 45
    34b4:	51 93       	st	Z+, r21
    34b6:	10 82       	st	Z, r1
    34b8:	c9 01       	movw	r24, r18
    34ba:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <strrev>

000034be <strrev>:
    34be:	dc 01       	movw	r26, r24
    34c0:	fc 01       	movw	r30, r24
    34c2:	67 2f       	mov	r22, r23
    34c4:	71 91       	ld	r23, Z+
    34c6:	77 23       	and	r23, r23
    34c8:	e1 f7       	brne	.-8      	; 0x34c2 <strrev+0x4>
    34ca:	32 97       	sbiw	r30, 0x02	; 2
    34cc:	04 c0       	rjmp	.+8      	; 0x34d6 <strrev+0x18>
    34ce:	7c 91       	ld	r23, X
    34d0:	6d 93       	st	X+, r22
    34d2:	70 83       	st	Z, r23
    34d4:	62 91       	ld	r22, -Z
    34d6:	ae 17       	cp	r26, r30
    34d8:	bf 07       	cpc	r27, r31
    34da:	c8 f3       	brcs	.-14     	; 0x34ce <strrev+0x10>
    34dc:	08 95       	ret

000034de <__udivmodhi4>:
    34de:	aa 1b       	sub	r26, r26
    34e0:	bb 1b       	sub	r27, r27
    34e2:	51 e1       	ldi	r21, 0x11	; 17
    34e4:	07 c0       	rjmp	.+14     	; 0x34f4 <__udivmodhi4_ep>

000034e6 <__udivmodhi4_loop>:
    34e6:	aa 1f       	adc	r26, r26
    34e8:	bb 1f       	adc	r27, r27
    34ea:	a6 17       	cp	r26, r22
    34ec:	b7 07       	cpc	r27, r23
    34ee:	10 f0       	brcs	.+4      	; 0x34f4 <__udivmodhi4_ep>
    34f0:	a6 1b       	sub	r26, r22
    34f2:	b7 0b       	sbc	r27, r23

000034f4 <__udivmodhi4_ep>:
    34f4:	88 1f       	adc	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	5a 95       	dec	r21
    34fa:	a9 f7       	brne	.-22     	; 0x34e6 <__udivmodhi4_loop>
    34fc:	80 95       	com	r24
    34fe:	90 95       	com	r25
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	08 95       	ret

00003506 <_exit>:
    3506:	f8 94       	cli

00003508 <__stop_program>:
    3508:	ff cf       	rjmp	.-2      	; 0x3508 <__stop_program>
